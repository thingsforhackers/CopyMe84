
obj/copyme84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000e08  00000e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800098  00800098  00000ed4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000016  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00000f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a48  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bc5  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000106b  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000278  00000000  00000000  000047b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007b9  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000630  00000000  00000000  000051e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00005819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	44 c2       	rjmp	.+1160   	; 0x48a <__ctors_end>
   2:	5e c2       	rjmp	.+1212   	; 0x4c0 <__bad_interrupt>
   4:	d1 c2       	rjmp	.+1442   	; 0x5a8 <__vector_2>
   6:	5c c2       	rjmp	.+1208   	; 0x4c0 <__bad_interrupt>
   8:	5b c2       	rjmp	.+1206   	; 0x4c0 <__bad_interrupt>
   a:	5a c2       	rjmp	.+1204   	; 0x4c0 <__bad_interrupt>
   c:	7c c2       	rjmp	.+1272   	; 0x506 <__vector_6>
   e:	58 c2       	rjmp	.+1200   	; 0x4c0 <__bad_interrupt>
  10:	57 c2       	rjmp	.+1198   	; 0x4c0 <__bad_interrupt>
  12:	7c c5       	rjmp	.+2808   	; 0xb0c <__vector_9>
  14:	55 c2       	rjmp	.+1194   	; 0x4c0 <__bad_interrupt>
  16:	54 c2       	rjmp	.+1192   	; 0x4c0 <__bad_interrupt>
  18:	53 c2       	rjmp	.+1190   	; 0x4c0 <__bad_interrupt>
  1a:	52 c2       	rjmp	.+1188   	; 0x4c0 <__bad_interrupt>
  1c:	51 c2       	rjmp	.+1186   	; 0x4c0 <__bad_interrupt>
  1e:	50 c2       	rjmp	.+1184   	; 0x4c0 <__bad_interrupt>
  20:	4f c2       	rjmp	.+1182   	; 0x4c0 <__bad_interrupt>
  22:	44 c3       	rjmp	.+1672   	; 0x6ac <mainStateFunc+0x22>
  24:	55 c3       	rjmp	.+1706   	; 0x6d0 <mainStateFunc+0x46>
  26:	86 c3       	rjmp	.+1804   	; 0x734 <mainStateFunc+0xaa>
  28:	92 c3       	rjmp	.+1828   	; 0x74e <mainStateFunc+0xc4>
  2a:	96 c3       	rjmp	.+1836   	; 0x758 <mainStateFunc+0xce>
  2c:	88 c4       	rjmp	.+2320   	; 0x93e <mainStateFunc+0x2b4>
  2e:	aa c3       	rjmp	.+1876   	; 0x784 <mainStateFunc+0xfa>
  30:	c3 c3       	rjmp	.+1926   	; 0x7b8 <mainStateFunc+0x12e>
  32:	de c3       	rjmp	.+1980   	; 0x7f0 <mainStateFunc+0x166>
  34:	f6 c3       	rjmp	.+2028   	; 0x822 <mainStateFunc+0x198>
  36:	12 c4       	rjmp	.+2084   	; 0x85c <mainStateFunc+0x1d2>
  38:	38 c4       	rjmp	.+2160   	; 0x8aa <mainStateFunc+0x220>

0000003a <__trampolines_end>:
  3a:	06 01       	movw	r0, r12
  3c:	4a 01       	movw	r8, r20
  3e:	88 01       	movw	r16, r16
  40:	0b 02       	muls	r16, r27
  42:	93 02       	muls	r25, r19
  44:	88 01       	movw	r16, r16
  46:	0b 02       	muls	r16, r27
  48:	93 02       	muls	r25, r19
  4a:	06 01       	movw	r0, r12
  4c:	4a 01       	movw	r8, r20
  4e:	88 01       	movw	r16, r16
  50:	0b 02       	muls	r16, r27
  52:	93 02       	muls	r25, r19
  54:	88 01       	movw	r16, r16
  56:	0b 02       	muls	r16, r27
  58:	93 02       	muls	r25, r19
  5a:	06 01       	movw	r0, r12
  5c:	26 01       	movw	r4, r12
  5e:	b8 01       	movw	r22, r16
  60:	4b 02       	muls	r20, r27
  62:	ba 02       	muls	r27, r26
  64:	b8 01       	movw	r22, r16
  66:	4b 02       	muls	r20, r27
  68:	ba 02       	muls	r27, r26
  6a:	06 01       	movw	r0, r12
  6c:	26 01       	movw	r4, r12
  6e:	b8 01       	movw	r22, r16
  70:	4b 02       	muls	r20, r27
  72:	ba 02       	muls	r27, r26
  74:	b8 01       	movw	r22, r16
  76:	4b 02       	muls	r20, r27
  78:	ba 02       	muls	r27, r26
  7a:	f7 00       	.word	0x00f7	; ????
  7c:	26 01       	movw	r4, r12
  7e:	88 01       	movw	r16, r16
  80:	4b 02       	muls	r20, r27
  82:	ba 02       	muls	r27, r26
  84:	88 01       	movw	r16, r16
  86:	4b 02       	muls	r20, r27
  88:	ba 02       	muls	r27, r26
  8a:	f7 00       	.word	0x00f7	; ????
  8c:	26 01       	movw	r4, r12
  8e:	88 01       	movw	r16, r16
  90:	4b 02       	muls	r20, r27
  92:	ba 02       	muls	r27, r26
  94:	88 01       	movw	r16, r16
  96:	4b 02       	muls	r20, r27
  98:	ba 02       	muls	r27, r26
  9a:	06 01       	movw	r0, r12
  9c:	4a 01       	movw	r8, r20
  9e:	88 01       	movw	r16, r16
  a0:	0b 02       	muls	r16, r27
  a2:	93 02       	muls	r25, r19
  a4:	88 01       	movw	r16, r16
  a6:	0b 02       	muls	r16, r27
  a8:	93 02       	muls	r25, r19
  aa:	06 01       	movw	r0, r12
  ac:	4a 01       	movw	r8, r20
  ae:	88 01       	movw	r16, r16
  b0:	0b 02       	muls	r16, r27
  b2:	93 02       	muls	r25, r19
  b4:	88 01       	movw	r16, r16
  b6:	0b 02       	muls	r16, r27
  b8:	93 02       	muls	r25, r19
  ba:	06 01       	movw	r0, r12
  bc:	4a 01       	movw	r8, r20
  be:	b8 01       	movw	r22, r16
  c0:	93 02       	muls	r25, r19
  c2:	70 03       	mulsu	r23, r16
  c4:	b8 01       	movw	r22, r16
  c6:	93 02       	muls	r25, r19
  c8:	70 03       	mulsu	r23, r16
  ca:	06 01       	movw	r0, r12
  cc:	4a 01       	movw	r8, r20
  ce:	b8 01       	movw	r22, r16
  d0:	93 02       	muls	r25, r19
  d2:	70 03       	mulsu	r23, r16
  d4:	b8 01       	movw	r22, r16
  d6:	93 02       	muls	r25, r19
  d8:	70 03       	mulsu	r23, r16
  da:	06 01       	movw	r0, r12
  dc:	26 01       	movw	r4, r12
  de:	72 01       	movw	r14, r4
  e0:	b8 01       	movw	r22, r16
  e2:	4b 02       	muls	r20, r27
  e4:	72 01       	movw	r14, r4
  e6:	b8 01       	movw	r22, r16
  e8:	4b 02       	muls	r20, r27
  ea:	06 01       	movw	r0, r12
  ec:	26 01       	movw	r4, r12
  ee:	72 01       	movw	r14, r4
  f0:	b8 01       	movw	r22, r16
  f2:	4b 02       	muls	r20, r27
  f4:	72 01       	movw	r14, r4
  f6:	b8 01       	movw	r22, r16
  f8:	4b 02       	muls	r20, r27
  fa:	f7 00       	.word	0x00f7	; ????
  fc:	26 01       	movw	r4, r12
  fe:	88 01       	movw	r16, r16
 100:	4b 02       	muls	r20, r27
 102:	10 03       	mulsu	r17, r16
 104:	88 01       	movw	r16, r16
 106:	4b 02       	muls	r20, r27
 108:	10 03       	mulsu	r17, r16
 10a:	f7 00       	.word	0x00f7	; ????
 10c:	26 01       	movw	r4, r12
 10e:	88 01       	movw	r16, r16
 110:	4b 02       	muls	r20, r27
 112:	10 03       	mulsu	r17, r16
 114:	88 01       	movw	r16, r16
 116:	4b 02       	muls	r20, r27
 118:	10 03       	mulsu	r17, r16
 11a:	f7 00       	.word	0x00f7	; ????
 11c:	06 01       	movw	r0, r12
 11e:	4a 01       	movw	r8, r20
 120:	88 01       	movw	r16, r16
 122:	0b 02       	muls	r16, r27
 124:	4a 01       	movw	r8, r20
 126:	88 01       	movw	r16, r16
 128:	0b 02       	muls	r16, r27
 12a:	f7 00       	.word	0x00f7	; ????
 12c:	06 01       	movw	r0, r12
 12e:	4a 01       	movw	r8, r20
 130:	88 01       	movw	r16, r16
 132:	0b 02       	muls	r16, r27
 134:	4a 01       	movw	r8, r20
 136:	88 01       	movw	r16, r16
 138:	0b 02       	muls	r16, r27
 13a:	dc 00       	.word	0x00dc	; ????
 13c:	06 01       	movw	r0, r12
 13e:	4a 01       	movw	r8, r20
 140:	88 01       	movw	r16, r16
 142:	0b 02       	muls	r16, r27
 144:	4a 01       	movw	r8, r20
 146:	88 01       	movw	r16, r16
 148:	0b 02       	muls	r16, r27
 14a:	dc 00       	.word	0x00dc	; ????
 14c:	06 01       	movw	r0, r12
 14e:	4a 01       	movw	r8, r20
 150:	88 01       	movw	r16, r16
 152:	0b 02       	muls	r16, r27
 154:	4a 01       	movw	r8, r20
 156:	88 01       	movw	r16, r16
 158:	0b 02       	muls	r16, r27
 15a:	93 00       	.word	0x0093	; ????
 15c:	dc 00       	.word	0x00dc	; ????
 15e:	26 01       	movw	r4, r12
 160:	72 01       	movw	r14, r4
 162:	0b 02       	muls	r16, r27
 164:	26 01       	movw	r4, r12
 166:	72 01       	movw	r14, r4
 168:	0b 02       	muls	r16, r27
 16a:	93 00       	.word	0x0093	; ????
 16c:	dc 00       	.word	0x00dc	; ????
 16e:	26 01       	movw	r4, r12
 170:	72 01       	movw	r14, r4
 172:	0b 02       	muls	r16, r27
 174:	26 01       	movw	r4, r12
 176:	72 01       	movw	r14, r4
 178:	0b 02       	muls	r16, r27
 17a:	c4 00       	.word	0x00c4	; ????
 17c:	f7 00       	.word	0x00f7	; ????
 17e:	26 01       	movw	r4, r12
 180:	88 01       	movw	r16, r16
 182:	ee 01       	movw	r28, r28
 184:	26 01       	movw	r4, r12
 186:	88 01       	movw	r16, r16
 188:	ee 01       	movw	r28, r28
 18a:	c4 00       	.word	0x00c4	; ????
 18c:	f7 00       	.word	0x00f7	; ????
 18e:	26 01       	movw	r4, r12
 190:	88 01       	movw	r16, r16
 192:	ee 01       	movw	r28, r28
 194:	26 01       	movw	r4, r12
 196:	88 01       	movw	r16, r16
 198:	ee 01       	movw	r28, r28
 19a:	c4 00       	.word	0x00c4	; ????
 19c:	e9 00       	.word	0x00e9	; ????
 19e:	4a 01       	movw	r8, r20
 1a0:	88 01       	movw	r16, r16
 1a2:	2a 02       	muls	r18, r26
 1a4:	4a 01       	movw	r8, r20
 1a6:	88 01       	movw	r16, r16
 1a8:	2a 02       	muls	r18, r26
 1aa:	c4 00       	.word	0x00c4	; ????
 1ac:	e9 00       	.word	0x00e9	; ????
 1ae:	4a 01       	movw	r8, r20
 1b0:	88 01       	movw	r16, r16
 1b2:	2a 02       	muls	r18, r26
 1b4:	4a 01       	movw	r8, r20
 1b6:	88 01       	movw	r16, r16
 1b8:	2a 02       	muls	r18, r26
 1ba:	af 00       	.word	0x00af	; ????
 1bc:	dc 00       	.word	0x00dc	; ????
 1be:	26 01       	movw	r4, r12
 1c0:	b8 01       	movw	r22, r16
 1c2:	4b 02       	muls	r20, r27
 1c4:	26 01       	movw	r4, r12
 1c6:	b8 01       	movw	r22, r16
 1c8:	4b 02       	muls	r20, r27
 1ca:	af 00       	.word	0x00af	; ????
 1cc:	dc 00       	.word	0x00dc	; ????
 1ce:	26 01       	movw	r4, r12
 1d0:	b8 01       	movw	r22, r16
 1d2:	4b 02       	muls	r20, r27
 1d4:	26 01       	movw	r4, r12
 1d6:	b8 01       	movw	r22, r16
 1d8:	4b 02       	muls	r20, r27
 1da:	af 00       	.word	0x00af	; ????
 1dc:	d0 00       	.word	0x00d0	; ????
 1de:	26 01       	movw	r4, r12
 1e0:	5d 01       	movw	r10, r26
 1e2:	ee 01       	movw	r28, r28
 1e4:	26 01       	movw	r4, r12
 1e6:	5d 01       	movw	r10, r26
 1e8:	ee 01       	movw	r28, r28
 1ea:	af 00       	.word	0x00af	; ????
 1ec:	d0 00       	.word	0x00d0	; ????
 1ee:	26 01       	movw	r4, r12
 1f0:	5d 01       	movw	r10, r26
 1f2:	ee 01       	movw	r28, r28
 1f4:	26 01       	movw	r4, r12
 1f6:	5d 01       	movw	r10, r26
 1f8:	ee 01       	movw	r28, r28
 1fa:	a5 00       	.word	0x00a5	; ????
 1fc:	c4 00       	.word	0x00c4	; ????
 1fe:	06 01       	movw	r0, r12
 200:	88 01       	movw	r16, r16
 202:	0b 02       	muls	r16, r27
 204:	06 01       	movw	r0, r12
 206:	88 01       	movw	r16, r16
 208:	0b 02       	muls	r16, r27
 20a:	a5 00       	.word	0x00a5	; ????
 20c:	c4 00       	.word	0x00c4	; ????
 20e:	06 01       	movw	r0, r12
 210:	88 01       	movw	r16, r16
 212:	0b 02       	muls	r16, r27
 214:	06 01       	movw	r0, r12
 216:	88 01       	movw	r16, r16
 218:	0b 02       	muls	r16, r27
 21a:	a5 00       	.word	0x00a5	; ????
 21c:	af 00       	.word	0x00af	; ????
 21e:	dc 00       	.word	0x00dc	; ????
 220:	06 01       	movw	r0, r12
 222:	5d 01       	movw	r10, r26
 224:	dc 00       	.word	0x00dc	; ????
 226:	06 01       	movw	r0, r12
 228:	5d 01       	movw	r10, r26
 22a:	a5 00       	.word	0x00a5	; ????
 22c:	af 00       	.word	0x00af	; ????
 22e:	dc 00       	.word	0x00dc	; ????
 230:	06 01       	movw	r0, r12
 232:	5d 01       	movw	r10, r26
 234:	dc 00       	.word	0x00dc	; ????
 236:	06 01       	movw	r0, r12
 238:	5d 01       	movw	r10, r26
 23a:	93 00       	.word	0x0093	; ????
 23c:	af 00       	.word	0x00af	; ????
 23e:	dc 00       	.word	0x00dc	; ????
 240:	06 01       	movw	r0, r12
 242:	5d 01       	movw	r10, r26
 244:	dc 00       	.word	0x00dc	; ????
 246:	06 01       	movw	r0, r12
 248:	5d 01       	movw	r10, r26
 24a:	93 00       	.word	0x0093	; ????
 24c:	af 00       	.word	0x00af	; ????
 24e:	dc 00       	.word	0x00dc	; ????
 250:	06 01       	movw	r0, r12
 252:	5d 01       	movw	r10, r26
 254:	dc 00       	.word	0x00dc	; ????
 256:	06 01       	movw	r0, r12
 258:	5d 01       	movw	r10, r26
 25a:	62 00       	.word	0x0062	; ????
 25c:	93 00       	.word	0x0093	; ????
 25e:	c4 00       	.word	0x00c4	; ????
 260:	f7 00       	.word	0x00f7	; ????
 262:	5d 01       	movw	r10, r26
 264:	c4 00       	.word	0x00c4	; ????
 266:	f7 00       	.word	0x00f7	; ????
 268:	5d 01       	movw	r10, r26
 26a:	62 00       	.word	0x0062	; ????
 26c:	93 00       	.word	0x0093	; ????
 26e:	c4 00       	.word	0x00c4	; ????
 270:	f7 00       	.word	0x00f7	; ????
 272:	5d 01       	movw	r10, r26
 274:	c4 00       	.word	0x00c4	; ????
 276:	f7 00       	.word	0x00f7	; ????
 278:	5d 01       	movw	r10, r26
 27a:	83 00       	.word	0x0083	; ????
 27c:	a5 00       	.word	0x00a5	; ????
 27e:	c4 00       	.word	0x00c4	; ????
 280:	06 01       	movw	r0, r12
 282:	4a 01       	movw	r8, r20
 284:	c4 00       	.word	0x00c4	; ????
 286:	06 01       	movw	r0, r12
 288:	4a 01       	movw	r8, r20
 28a:	83 00       	.word	0x0083	; ????
 28c:	a5 00       	.word	0x00a5	; ????
 28e:	c4 00       	.word	0x00c4	; ????
 290:	06 01       	movw	r0, r12
 292:	4a 01       	movw	r8, r20
 294:	c4 00       	.word	0x00c4	; ????
 296:	06 01       	movw	r0, r12
 298:	4a 01       	movw	r8, r20
 29a:	83 00       	.word	0x0083	; ????
 29c:	c4 00       	.word	0x00c4	; ????
 29e:	e9 00       	.word	0x00e9	; ????
 2a0:	06 01       	movw	r0, r12
 2a2:	4a 01       	movw	r8, r20
 2a4:	e9 00       	.word	0x00e9	; ????
 2a6:	06 01       	movw	r0, r12
 2a8:	4a 01       	movw	r8, r20
 2aa:	83 00       	.word	0x0083	; ????
 2ac:	c4 00       	.word	0x00c4	; ????
 2ae:	e9 00       	.word	0x00e9	; ????
 2b0:	06 01       	movw	r0, r12
 2b2:	4a 01       	movw	r8, r20
 2b4:	e9 00       	.word	0x00e9	; ????
 2b6:	06 01       	movw	r0, r12
 2b8:	4a 01       	movw	r8, r20
 2ba:	57 00       	.word	0x0057	; ????
 2bc:	af 00       	.word	0x00af	; ????
 2be:	dc 00       	.word	0x00dc	; ????
 2c0:	06 01       	movw	r0, r12
 2c2:	4a 01       	movw	r8, r20
 2c4:	dc 00       	.word	0x00dc	; ????
 2c6:	06 01       	movw	r0, r12
 2c8:	4a 01       	movw	r8, r20
 2ca:	57 00       	.word	0x0057	; ????
 2cc:	af 00       	.word	0x00af	; ????
 2ce:	dc 00       	.word	0x00dc	; ????
 2d0:	06 01       	movw	r0, r12
 2d2:	4a 01       	movw	r8, r20
 2d4:	dc 00       	.word	0x00dc	; ????
 2d6:	06 01       	movw	r0, r12
 2d8:	4a 01       	movw	r8, r20
 2da:	5d 00       	.word	0x005d	; ????
 2dc:	83 00       	.word	0x0083	; ????
 2de:	dc 00       	.word	0x00dc	; ????
 2e0:	06 01       	movw	r0, r12
 2e2:	37 01       	movw	r6, r14
 2e4:	dc 00       	.word	0x00dc	; ????
 2e6:	06 01       	movw	r0, r12
 2e8:	37 01       	movw	r6, r14
 2ea:	5d 00       	.word	0x005d	; ????
 2ec:	83 00       	.word	0x0083	; ????
 2ee:	dc 00       	.word	0x00dc	; ????
 2f0:	06 01       	movw	r0, r12
 2f2:	37 01       	movw	r6, r14
 2f4:	dc 00       	.word	0x00dc	; ????
 2f6:	06 01       	movw	r0, r12
 2f8:	37 01       	movw	r6, r14
 2fa:	68 00       	.word	0x0068	; ????
 2fc:	af 00       	.word	0x00af	; ????
 2fe:	f7 00       	.word	0x00f7	; ????
 300:	06 01       	movw	r0, r12
 302:	26 01       	movw	r4, r12
 304:	f7 00       	.word	0x00f7	; ????
 306:	06 01       	movw	r0, r12
 308:	26 01       	movw	r4, r12
 30a:	68 00       	.word	0x0068	; ????
 30c:	af 00       	.word	0x00af	; ????
 30e:	f7 00       	.word	0x00f7	; ????
 310:	06 01       	movw	r0, r12
 312:	26 01       	movw	r4, r12
 314:	f7 00       	.word	0x00f7	; ????
 316:	06 01       	movw	r0, r12
 318:	26 01       	movw	r4, r12
 31a:	62 00       	.word	0x0062	; ????
 31c:	af 00       	.word	0x00af	; ????
 31e:	c4 00       	.word	0x00c4	; ????
 320:	f7 00       	.word	0x00f7	; ????
 322:	26 01       	movw	r4, r12
 324:	c4 00       	.word	0x00c4	; ????
 326:	f7 00       	.word	0x00f7	; ????
 328:	26 01       	movw	r4, r12
 32a:	62 00       	.word	0x0062	; ????
 32c:	af 00       	.word	0x00af	; ????
 32e:	c4 00       	.word	0x00c4	; ????
 330:	f7 00       	.word	0x00f7	; ????
 332:	26 01       	movw	r4, r12
 334:	c4 00       	.word	0x00c4	; ????
 336:	f7 00       	.word	0x00f7	; ????
 338:	26 01       	movw	r4, r12
 33a:	62 00       	.word	0x0062	; ????
 33c:	a5 00       	.word	0x00a5	; ????
 33e:	c4 00       	.word	0x00c4	; ????
 340:	06 01       	movw	r0, r12
 342:	4a 01       	movw	r8, r20
 344:	c4 00       	.word	0x00c4	; ????
 346:	06 01       	movw	r0, r12
 348:	4a 01       	movw	r8, r20
 34a:	62 00       	.word	0x0062	; ????
 34c:	a5 00       	.word	0x00a5	; ????
 34e:	c4 00       	.word	0x00c4	; ????
 350:	06 01       	movw	r0, r12
 352:	4a 01       	movw	r8, r20
 354:	c4 00       	.word	0x00c4	; ????
 356:	06 01       	movw	r0, r12
 358:	4a 01       	movw	r8, r20
 35a:	62 00       	.word	0x0062	; ????
 35c:	93 00       	.word	0x0093	; ????
 35e:	c4 00       	.word	0x00c4	; ????
 360:	06 01       	movw	r0, r12
 362:	5d 01       	movw	r10, r26
 364:	c4 00       	.word	0x00c4	; ????
 366:	06 01       	movw	r0, r12
 368:	5d 01       	movw	r10, r26
 36a:	62 00       	.word	0x0062	; ????
 36c:	93 00       	.word	0x0093	; ????
 36e:	c4 00       	.word	0x00c4	; ????
 370:	06 01       	movw	r0, r12
 372:	5d 01       	movw	r10, r26
 374:	c4 00       	.word	0x00c4	; ????
 376:	06 01       	movw	r0, r12
 378:	5d 01       	movw	r10, r26
 37a:	62 00       	.word	0x0062	; ????
 37c:	93 00       	.word	0x0093	; ????
 37e:	c4 00       	.word	0x00c4	; ????
 380:	f7 00       	.word	0x00f7	; ????
 382:	5d 01       	movw	r10, r26
 384:	c4 00       	.word	0x00c4	; ????
 386:	f7 00       	.word	0x00f7	; ????
 388:	5d 01       	movw	r10, r26
 38a:	62 00       	.word	0x0062	; ????
 38c:	93 00       	.word	0x0093	; ????
 38e:	c4 00       	.word	0x00c4	; ????
 390:	f7 00       	.word	0x00f7	; ????
 392:	5d 01       	movw	r10, r26
 394:	c4 00       	.word	0x00c4	; ????
 396:	f7 00       	.word	0x00f7	; ????
 398:	5d 01       	movw	r10, r26
 39a:	62 00       	.word	0x0062	; ????
 39c:	9c 00       	.word	0x009c	; ????
 39e:	dc 00       	.word	0x00dc	; ????
 3a0:	06 01       	movw	r0, r12
 3a2:	72 01       	movw	r14, r4
 3a4:	dc 00       	.word	0x00dc	; ????
 3a6:	06 01       	movw	r0, r12
 3a8:	72 01       	movw	r14, r4
 3aa:	62 00       	.word	0x0062	; ????
 3ac:	9c 00       	.word	0x009c	; ????
 3ae:	dc 00       	.word	0x00dc	; ????
 3b0:	06 01       	movw	r0, r12
 3b2:	72 01       	movw	r14, r4
 3b4:	dc 00       	.word	0x00dc	; ????
 3b6:	06 01       	movw	r0, r12
 3b8:	72 01       	movw	r14, r4
 3ba:	62 00       	.word	0x0062	; ????
 3bc:	a5 00       	.word	0x00a5	; ????
 3be:	c4 00       	.word	0x00c4	; ????
 3c0:	06 01       	movw	r0, r12
 3c2:	88 01       	movw	r16, r16
 3c4:	c4 00       	.word	0x00c4	; ????
 3c6:	06 01       	movw	r0, r12
 3c8:	88 01       	movw	r16, r16
 3ca:	62 00       	.word	0x0062	; ????
 3cc:	a5 00       	.word	0x00a5	; ????
 3ce:	c4 00       	.word	0x00c4	; ????
 3d0:	06 01       	movw	r0, r12
 3d2:	88 01       	movw	r16, r16
 3d4:	c4 00       	.word	0x00c4	; ????
 3d6:	06 01       	movw	r0, r12
 3d8:	88 01       	movw	r16, r16
 3da:	62 00       	.word	0x0062	; ????
 3dc:	af 00       	.word	0x00af	; ????
 3de:	c4 00       	.word	0x00c4	; ????
 3e0:	06 01       	movw	r0, r12
 3e2:	5d 01       	movw	r10, r26
 3e4:	c4 00       	.word	0x00c4	; ????
 3e6:	06 01       	movw	r0, r12
 3e8:	5d 01       	movw	r10, r26
 3ea:	62 00       	.word	0x0062	; ????
 3ec:	af 00       	.word	0x00af	; ????
 3ee:	c4 00       	.word	0x00c4	; ????
 3f0:	06 01       	movw	r0, r12
 3f2:	5d 01       	movw	r10, r26
 3f4:	c4 00       	.word	0x00c4	; ????
 3f6:	06 01       	movw	r0, r12
 3f8:	5d 01       	movw	r10, r26
 3fa:	62 00       	.word	0x0062	; ????
 3fc:	af 00       	.word	0x00af	; ????
 3fe:	c4 00       	.word	0x00c4	; ????
 400:	f7 00       	.word	0x00f7	; ????
 402:	5d 01       	movw	r10, r26
 404:	c4 00       	.word	0x00c4	; ????
 406:	f7 00       	.word	0x00f7	; ????
 408:	5d 01       	movw	r10, r26
 40a:	62 00       	.word	0x0062	; ????
 40c:	af 00       	.word	0x00af	; ????
 40e:	c4 00       	.word	0x00c4	; ????
 410:	f7 00       	.word	0x00f7	; ????
 412:	5d 01       	movw	r10, r26
 414:	c4 00       	.word	0x00c4	; ????
 416:	f7 00       	.word	0x00f7	; ????
 418:	5d 01       	movw	r10, r26
 41a:	41 00       	.word	0x0041	; ????
 41c:	83 00       	.word	0x0083	; ????
 41e:	c4 00       	.word	0x00c4	; ????
 420:	e9 00       	.word	0x00e9	; ????
 422:	4a 01       	movw	r8, r20
 424:	c4 00       	.word	0x00c4	; ????
 426:	e9 00       	.word	0x00e9	; ????
 428:	4a 01       	movw	r8, r20
 42a:	41 00       	.word	0x0041	; ????
 42c:	83 00       	.word	0x0083	; ????
 42e:	c4 00       	.word	0x00c4	; ????
 430:	e9 00       	.word	0x00e9	; ????
 432:	4a 01       	movw	r8, r20
 434:	c4 00       	.word	0x00c4	; ????
 436:	e9 00       	.word	0x00e9	; ????
 438:	4a 01       	movw	r8, r20
 43a:	41 00       	.word	0x0041	; ????
 43c:	83 00       	.word	0x0083	; ????
 43e:	af 00       	.word	0x00af	; ????
 440:	dc 00       	.word	0x00dc	; ????
 442:	06 01       	movw	r0, r12
 444:	5d 01       	movw	r10, r26
 446:	06 01       	movw	r0, r12
 448:	dc 00       	.word	0x00dc	; ????
 44a:	06 01       	movw	r0, r12
 44c:	dc 00       	.word	0x00dc	; ????
 44e:	af 00       	.word	0x00af	; ????
 450:	dc 00       	.word	0x00dc	; ????
 452:	af 00       	.word	0x00af	; ????
 454:	93 00       	.word	0x0093	; ????
 456:	af 00       	.word	0x00af	; ????
 458:	93 00       	.word	0x0093	; ????
 45a:	41 00       	.word	0x0041	; ????
 45c:	7b 00       	.word	0x007b	; ????
 45e:	88 01       	movw	r16, r16
 460:	ee 01       	movw	r28, r28
 462:	4b 02       	muls	r20, r27
 464:	ba 02       	muls	r27, r26
 466:	4b 02       	muls	r20, r27
 468:	ee 01       	movw	r28, r28
 46a:	4b 02       	muls	r20, r27
 46c:	ee 01       	movw	r28, r28
 46e:	88 01       	movw	r16, r16
 470:	ee 01       	movw	r28, r28
 472:	26 01       	movw	r4, r12
 474:	5d 01       	movw	r10, r26
 476:	4a 01       	movw	r8, r20
 478:	26 01       	movw	r4, r12

0000047a <noteArray2>:
 47a:	06 01 4a 01 88 01 0b 02 93 02 88 01 0b 02 93 02     ..J.............

0000048a <__ctors_end>:
 48a:	11 24       	eor	r1, r1
 48c:	1f be       	out	0x3f, r1	; 63
 48e:	cf e5       	ldi	r28, 0x5F	; 95
 490:	d2 e0       	ldi	r29, 0x02	; 2
 492:	de bf       	out	0x3e, r29	; 62
 494:	cd bf       	out	0x3d, r28	; 61

00000496 <__do_copy_data>:
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	a0 e6       	ldi	r26, 0x60	; 96
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e8 e0       	ldi	r30, 0x08	; 8
 49e:	fe e0       	ldi	r31, 0x0E	; 14
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__do_copy_data+0x10>
 4a2:	05 90       	lpm	r0, Z+
 4a4:	0d 92       	st	X+, r0
 4a6:	a8 39       	cpi	r26, 0x98	; 152
 4a8:	b1 07       	cpc	r27, r17
 4aa:	d9 f7       	brne	.-10     	; 0x4a2 <__do_copy_data+0xc>

000004ac <__do_clear_bss>:
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	a8 e9       	ldi	r26, 0x98	; 152
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <.do_clear_bss_start>

000004b4 <.do_clear_bss_loop>:
 4b4:	1d 92       	st	X+, r1

000004b6 <.do_clear_bss_start>:
 4b6:	ac 3f       	cpi	r26, 0xFC	; 252
 4b8:	b2 07       	cpc	r27, r18
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <.do_clear_bss_loop>
 4bc:	62 d3       	rcall	.+1732   	; 0xb82 <main>
 4be:	a2 c4       	rjmp	.+2372   	; 0xe04 <_exit>

000004c0 <__bad_interrupt>:
 4c0:	9f cd       	rjmp	.-1218   	; 0x0 <__vectors>

000004c2 <getInput>:

static uint8_t getInput()
{
  uint8_t pressed;

  if(buttons[RED_BUTTON_IDX].state == BUTTON_DOWN)
 4c2:	80 91 63 00 	lds	r24, 0x0063
 4c6:	90 91 64 00 	lds	r25, 0x0064
 4ca:	03 97       	sbiw	r24, 0x03	; 3
 4cc:	a1 f0       	breq	.+40     	; 0x4f6 <getInput+0x34>
  {
      pressed = INDICATE_RED;
  }
  else if(buttons[BLUE_BUTTON_IDX].state == BUTTON_DOWN)
 4ce:	80 91 6c 00 	lds	r24, 0x006C
 4d2:	90 91 6d 00 	lds	r25, 0x006D
 4d6:	03 97       	sbiw	r24, 0x03	; 3
 4d8:	81 f0       	breq	.+32     	; 0x4fa <getInput+0x38>
  {
      pressed = INDICATE_BLUE;
  }
  else if(buttons[YELLOW_BUTTON_IDX].state == BUTTON_DOWN)
 4da:	80 91 75 00 	lds	r24, 0x0075
 4de:	90 91 76 00 	lds	r25, 0x0076
 4e2:	03 97       	sbiw	r24, 0x03	; 3
 4e4:	61 f0       	breq	.+24     	; 0x4fe <getInput+0x3c>
  {
      pressed = INDICATE_YELLOW;
  }
  else if(buttons[GREEN_BUTTON_IDX].state == BUTTON_DOWN)
 4e6:	80 91 7e 00 	lds	r24, 0x007E
 4ea:	90 91 7f 00 	lds	r25, 0x007F
 4ee:	03 97       	sbiw	r24, 0x03	; 3
 4f0:	41 f0       	breq	.+16     	; 0x502 <getInput+0x40>
  {
      pressed = INDICATE_GREEN;
  }
  else
  {
    pressed = NO_KEY;
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	08 95       	ret
{
  uint8_t pressed;

  if(buttons[RED_BUTTON_IDX].state == BUTTON_DOWN)
  {
      pressed = INDICATE_RED;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
  }
  else if(buttons[BLUE_BUTTON_IDX].state == BUTTON_DOWN)
  {
      pressed = INDICATE_BLUE;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
  }
  else if(buttons[YELLOW_BUTTON_IDX].state == BUTTON_DOWN)
  {
      pressed = INDICATE_YELLOW;
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	08 95       	ret
  }
  else if(buttons[GREEN_BUTTON_IDX].state == BUTTON_DOWN)
  {
      pressed = INDICATE_GREEN;
 502:	83 e0       	ldi	r24, 0x03	; 3
  {
    pressed = NO_KEY;
  }

  return pressed;
}
 504:	08 95       	ret

00000506 <__vector_6>:


volatile uint16_t led22;

ISR(TIM1_COMPA_vect)
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	4f 93       	push	r20
 51a:	5f 93       	push	r21
 51c:	6f 93       	push	r22
 51e:	7f 93       	push	r23
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	af 93       	push	r26
 526:	bf 93       	push	r27
 528:	ef 93       	push	r30
 52a:	ff 93       	push	r31
  if(millis() >= toneStopTime)
 52c:	1e d3       	rcall	.+1596   	; 0xb6a <millis>
 52e:	00 91 f6 00 	lds	r16, 0x00F6
 532:	10 91 f7 00 	lds	r17, 0x00F7
 536:	20 91 f8 00 	lds	r18, 0x00F8
 53a:	30 91 f9 00 	lds	r19, 0x00F9
 53e:	60 17       	cp	r22, r16
 540:	71 07       	cpc	r23, r17
 542:	82 07       	cpc	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	08 f0       	brcs	.+2      	; 0x54a <__vector_6+0x44>
  {
    TCCR1B = 0; //Stop Timer1
 548:	1e bc       	out	0x2e, r1	; 46
  }
}
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <enterDeepSleep>:

void enterDeepSleep(void)
{
  PCMSK0 |= _BV(PCINT2) | _BV(PCINT3) | _BV(PCINT4) | _BV(PCINT5);
 570:	82 b3       	in	r24, 0x12	; 18
 572:	8c 63       	ori	r24, 0x3C	; 60
 574:	82 bb       	out	0x12, r24	; 18
  GIMSK |= _BV(PCIE0);
 576:	8b b7       	in	r24, 0x3b	; 59
 578:	80 61       	ori	r24, 0x10	; 16
 57a:	8b bf       	out	0x3b, r24	; 59
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	87 7e       	andi	r24, 0xE7	; 231
 580:	80 61       	ori	r24, 0x10	; 16
 582:	85 bf       	out	0x35, r24	; 53
  sleep_enable();
 584:	85 b7       	in	r24, 0x35	; 53
 586:	80 62       	ori	r24, 0x20	; 32
 588:	85 bf       	out	0x35, r24	; 53
  sei();
 58a:	78 94       	sei
  sleep_cpu();
 58c:	88 95       	sleep
  cli();
 58e:	f8 94       	cli
  GIMSK &= ~_BV(PCIE0);
 590:	8b b7       	in	r24, 0x3b	; 59
 592:	8f 7e       	andi	r24, 0xEF	; 239
 594:	8b bf       	out	0x3b, r24	; 59
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 596:	98 e0       	ldi	r25, 0x08	; 8
 598:	88 e1       	ldi	r24, 0x18	; 24
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	a8 95       	wdr
 5a0:	81 bd       	out	0x21, r24	; 33
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	91 bd       	out	0x21, r25	; 33
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <enterDeepSleep+0x36>

000005a8 <__vector_2>:
  wdt_enable(WDTO_15MS);
  while(1);
}
EMPTY_INTERRUPT(PCINT0_vect);
 5a8:	18 95       	reti

000005aa <isNoteFinished>:

uint8_t isNoteFinished(void)
{
  return TCCR1B == 0;
 5aa:	9e b5       	in	r25, 0x2e	; 46
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	91 11       	cpse	r25, r1
 5b0:	80 e0       	ldi	r24, 0x00	; 0
}
 5b2:	08 95       	ret

000005b4 <playNote>:
// 1MHz clk, preScale 8, /2 for toggle
#define TMR1_FREQ ((uint16_t)( (F_CPU / 8) / 2 ))
// note in Hz
// duration in ms
void playNote(uint16_t note, uint32_t duration)
{
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	9c 01       	movw	r18, r24
 5c2:	6a 01       	movw	r12, r20
 5c4:	7b 01       	movw	r14, r22
  uint16_t cmpValue = TMR1_FREQ / note;
 5c6:	84 e2       	ldi	r24, 0x24	; 36
 5c8:	94 ef       	ldi	r25, 0xF4	; 244
 5ca:	b9 01       	movw	r22, r18
 5cc:	26 d3       	rcall	.+1612   	; 0xc1a <__udivmodhi4>
 5ce:	eb 01       	movw	r28, r22

  uint8_t valueHigh = (cmpValue >> 8) & 0xFF;
  uint8_t valueLow = cmpValue & 0xFF;

  cli();
 5d0:	f8 94       	cli
  TIFR1 = _BV(OCF1A);
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	8b b9       	out	0x0b, r24	; 11
  toneStopTime = millis() + duration;
 5d6:	c9 d2       	rcall	.+1426   	; 0xb6a <millis>
 5d8:	dc 01       	movw	r26, r24
 5da:	cb 01       	movw	r24, r22
 5dc:	8c 0d       	add	r24, r12
 5de:	9d 1d       	adc	r25, r13
 5e0:	ae 1d       	adc	r26, r14
 5e2:	bf 1d       	adc	r27, r15
 5e4:	80 93 f6 00 	sts	0x00F6, r24
 5e8:	90 93 f7 00 	sts	0x00F7, r25
 5ec:	a0 93 f8 00 	sts	0x00F8, r26
 5f0:	b0 93 f9 00 	sts	0x00F9, r27
  toggle_count = duration;
 5f4:	c0 92 e8 00 	sts	0x00E8, r12
 5f8:	d0 92 e9 00 	sts	0x00E9, r13
 5fc:	e0 92 ea 00 	sts	0x00EA, r14
 600:	f0 92 eb 00 	sts	0x00EB, r15
  OCR1AH = valueHigh;
 604:	db bd       	out	0x2b, r29	; 43
  OCR1AL = valueLow;
 606:	ca bd       	out	0x2a, r28	; 42
  TCCR1B = _BV(WGM12) | _BV(CS11);
 608:	8a e0       	ldi	r24, 0x0A	; 10
 60a:	8e bd       	out	0x2e, r24	; 46
  sei();
 60c:	78 94       	sei
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	ff 90       	pop	r15
 614:	ef 90       	pop	r14
 616:	df 90       	pop	r13
 618:	cf 90       	pop	r12
 61a:	08 95       	ret

0000061c <doIndicateStep>:
}

static void doIndicateStep(uint8_t step)
{

  switch(sequence[step])
 61c:	e8 2f       	mov	r30, r24
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ec 55       	subi	r30, 0x5C	; 92
 622:	ff 4f       	sbci	r31, 0xFF	; 255
 624:	80 81       	ld	r24, Z
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	79 f0       	breq	.+30     	; 0x648 <doIndicateStep+0x2c>
 62a:	28 f0       	brcs	.+10     	; 0x636 <doIndicateStep+0x1a>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	a9 f0       	breq	.+42     	; 0x65a <doIndicateStep+0x3e>
 630:	83 30       	cpi	r24, 0x03	; 3
 632:	e1 f0       	breq	.+56     	; 0x66c <doIndicateStep+0x50>
 634:	08 95       	ret
  {
    case INDICATE_RED:
    {
      playNote(NOTE_A4, MAX_DURATION);
 636:	4e e8       	ldi	r20, 0x8E	; 142
 638:	51 e0       	ldi	r21, 0x01	; 1
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	88 eb       	ldi	r24, 0xB8	; 184
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	b8 df       	rcall	.-144    	; 0x5b4 <playNote>
      PORTB |= _BV(RED_LED);
 644:	c0 9a       	sbi	0x18, 0	; 24
 646:	08 95       	ret
      break;
    }

    case INDICATE_BLUE:
    {
      playNote(NOTE_G4, MAX_DURATION);
 648:	4e e8       	ldi	r20, 0x8E	; 142
 64a:	51 e0       	ldi	r21, 0x01	; 1
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	88 e8       	ldi	r24, 0x88	; 136
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	af df       	rcall	.-162    	; 0x5b4 <playNote>
      PORTB |= _BV(BLUE_LED);
 656:	c1 9a       	sbi	0x18, 1	; 24
      break;
 658:	08 95       	ret
    }

    case INDICATE_YELLOW:
    {
      playNote(NOTE_C4, MAX_DURATION);
 65a:	4e e8       	ldi	r20, 0x8E	; 142
 65c:	51 e0       	ldi	r21, 0x01	; 1
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	85 e1       	ldi	r24, 0x15	; 21
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	a6 df       	rcall	.-180    	; 0x5b4 <playNote>
      PORTB |= _BV(YELLOW_LED);
 668:	c3 9a       	sbi	0x18, 3	; 24
      break;
 66a:	08 95       	ret
    }

    case INDICATE_GREEN:
    {
      playNote(NOTE_G5, MAX_DURATION);
 66c:	4e e8       	ldi	r20, 0x8E	; 142
 66e:	51 e0       	ldi	r21, 0x01	; 1
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 e1       	ldi	r24, 0x10	; 16
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	9d df       	rcall	.-198    	; 0x5b4 <playNote>
      PORTB |= _BV(GREEN_LED);
 67a:	c2 9a       	sbi	0x18, 2	; 24
 67c:	08 95       	ret

0000067e <stopNote>:
  sei();
}

void stopNote()
{
  cli();
 67e:	f8 94       	cli
  TCCR1B = 0;
 680:	1e bc       	out	0x2e, r1	; 46
  TIFR1 = _BV(OCF1A);
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	8b b9       	out	0x0b, r24	; 11
  sei();
 686:	78 94       	sei
 688:	08 95       	ret

0000068a <mainStateFunc>:

  return pressed;
}

static uint8_t mainStateFunc(struct StateM* sm)
{
 68a:	a0 e0       	ldi	r26, 0x00	; 0
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	ea e4       	ldi	r30, 0x4A	; 74
 690:	f3 e0       	ldi	r31, 0x03	; 3
 692:	16 c3       	rjmp	.+1580   	; 0xcc0 <__prologue_saves__+0x14>
 694:	ec 01       	movw	r28, r24
  uint8_t retValue = 0;

  switch(sm->current)
 696:	e8 81       	ld	r30, Y
 698:	8e 2f       	mov	r24, r30
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	8c 30       	cpi	r24, 0x0C	; 12
 69e:	91 05       	cpc	r25, r1
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <mainStateFunc+0x1a>
 6a2:	4d c1       	rjmp	.+666    	; 0x93e <mainStateFunc+0x2b4>
 6a4:	fc 01       	movw	r30, r24
 6a6:	ef 5e       	subi	r30, 0xEF	; 239
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	09 94       	ijmp
  {
    case GAME_STATE_POR:
    {
      if(isStateEntered(sm))
 6ac:	ce 01       	movw	r24, r28
 6ae:	26 d2       	rcall	.+1100   	; 0xafc <isStateEntered>
 6b0:	88 23       	and	r24, r24
 6b2:	21 f0       	breq	.+8      	; 0x6bc <mainStateFunc+0x32>
      {
        currentLevel = 1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 a3 00 	sts	0x00A3, r24
 6ba:	42 c1       	rjmp	.+644    	; 0x940 <mainStateFunc+0x2b6>
      }
      else if(getStateDuration(sm) > 2000)
 6bc:	ce 01       	movw	r24, r28
 6be:	0b d2       	rcall	.+1046   	; 0xad6 <getStateDuration>
 6c0:	61 3d       	cpi	r22, 0xD1	; 209
 6c2:	77 40       	sbci	r23, 0x07	; 7
 6c4:	81 05       	cpc	r24, r1
 6c6:	91 05       	cpc	r25, r1
 6c8:	08 f4       	brcc	.+2      	; 0x6cc <mainStateFunc+0x42>
 6ca:	3a c1       	rjmp	.+628    	; 0x940 <mainStateFunc+0x2b6>
      {
        //sm->next = GAME_STATE_PRE_GAME;
        sm->next = GAME_STATE_TITLE_TUNE_START;
 6cc:	89 e0       	ldi	r24, 0x09	; 9
 6ce:	3d c0       	rjmp	.+122    	; 0x74a <mainStateFunc+0xc0>
    }

    case GAME_STATE_PRE_GAME:
    {
      static uint8_t leds = 0;
      if(getInput() != NO_KEY)
 6d0:	f8 de       	rcall	.-528    	; 0x4c2 <getInput>
 6d2:	84 30       	cpi	r24, 0x04	; 4
 6d4:	b9 f0       	breq	.+46     	; 0x704 <mainStateFunc+0x7a>
      {
        srand(millis());
 6d6:	49 d2       	rcall	.+1170   	; 0xb6a <millis>
 6d8:	cb 01       	movw	r24, r22
 6da:	6d d3       	rcall	.+1754   	; 0xdb6 <srand>
 6dc:	04 ea       	ldi	r16, 0xA4	; 164
 6de:	10 e0       	ldi	r17, 0x00	; 0

static void generateSequence(void)
{
  for(int idx = 0; idx < MAX_LEVEL; idx++)
  {
    sequence[idx] = (uint8_t)(rand() % INDICATE_CNT);
 6e0:	94 e0       	ldi	r25, 0x04	; 4
 6e2:	e9 2e       	mov	r14, r25
 6e4:	f1 2c       	mov	r15, r1
 6e6:	63 d3       	rcall	.+1734   	; 0xdae <rand>
 6e8:	b7 01       	movw	r22, r14
 6ea:	ab d2       	rcall	.+1366   	; 0xc42 <__divmodhi4>
 6ec:	f8 01       	movw	r30, r16
 6ee:	81 93       	st	Z+, r24
 6f0:	8f 01       	movw	r16, r30
  }
}

static void generateSequence(void)
{
  for(int idx = 0; idx < MAX_LEVEL; idx++)
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	04 3e       	cpi	r16, 0xE4	; 228
 6f6:	1f 07       	cpc	r17, r31
 6f8:	b1 f7       	brne	.-20     	; 0x6e6 <mainStateFunc+0x5c>
      static uint8_t leds = 0;
      if(getInput() != NO_KEY)
      {
        srand(millis());
        generateSequence();
        sm->next = GAME_STATE_PLAY_SEQUENCE_INIT;
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	8a 83       	std	Y+2, r24	; 0x02
        leds = 0;
 6fe:	10 92 98 00 	sts	0x0098, r1
 702:	15 c0       	rjmp	.+42     	; 0x72e <mainStateFunc+0xa4>
      }
      else if(getStateDuration(sm) > 500)
 704:	ce 01       	movw	r24, r28
 706:	e7 d1       	rcall	.+974    	; 0xad6 <getStateDuration>
 708:	65 3f       	cpi	r22, 0xF5	; 245
 70a:	71 40       	sbci	r23, 0x01	; 1
 70c:	81 05       	cpc	r24, r1
 70e:	91 05       	cpc	r25, r1
 710:	70 f0       	brcs	.+28     	; 0x72e <mainStateFunc+0xa4>
      {
        sm->enterTime = millis();
 712:	2b d2       	rcall	.+1110   	; 0xb6a <millis>
 714:	6b 83       	std	Y+3, r22	; 0x03
 716:	7c 83       	std	Y+4, r23	; 0x04
 718:	8d 83       	std	Y+5, r24	; 0x05
 71a:	9e 83       	std	Y+6, r25	; 0x06
        leds = leds ? 0 : _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
 71c:	80 91 98 00 	lds	r24, 0x0098
 720:	81 11       	cpse	r24, r1
 722:	02 c0       	rjmp	.+4      	; 0x728 <mainStateFunc+0x9e>
 724:	8f e0       	ldi	r24, 0x0F	; 15
 726:	01 c0       	rjmp	.+2      	; 0x72a <mainStateFunc+0xa0>
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	80 93 98 00 	sts	0x0098, r24
      }
      PORTB = leds;
 72e:	80 91 98 00 	lds	r24, 0x0098
 732:	6a c0       	rjmp	.+212    	; 0x808 <mainStateFunc+0x17e>
      break;
    }

    case GAME_STATE_PLAY_SEQUENCE_INIT:
    {
      if(getStateDuration(sm) > 2000)
 734:	ce 01       	movw	r24, r28
 736:	cf d1       	rcall	.+926    	; 0xad6 <getStateDuration>
 738:	61 3d       	cpi	r22, 0xD1	; 209
 73a:	77 40       	sbci	r23, 0x07	; 7
 73c:	81 05       	cpc	r24, r1
 73e:	91 05       	cpc	r25, r1
 740:	08 f4       	brcc	.+2      	; 0x744 <mainStateFunc+0xba>
 742:	fe c0       	rjmp	.+508    	; 0x940 <mainStateFunc+0x2b6>
      {
        currentStep = 0;
 744:	10 92 a2 00 	sts	0x00A2, r1
        sm->next = GAME_STATE_PLAY_SEQUENCE_INDICATE_STEP;
 748:	83 e0       	ldi	r24, 0x03	; 3
 74a:	8a 83       	std	Y+2, r24	; 0x02
 74c:	f9 c0       	rjmp	.+498    	; 0x940 <mainStateFunc+0x2b6>
      break;
    }

    case GAME_STATE_PLAY_SEQUENCE_INDICATE_STEP:
    {
      doIndicateStep(currentStep);
 74e:	80 91 a2 00 	lds	r24, 0x00A2
 752:	64 df       	rcall	.-312    	; 0x61c <doIndicateStep>
      sm->next = GAME_STATE_PLAY_SEQUENCE_INDICATE_DELAY;
 754:	84 e0       	ldi	r24, 0x04	; 4
 756:	f9 cf       	rjmp	.-14     	; 0x74a <mainStateFunc+0xc0>
      break;
    }

    case GAME_STATE_PLAY_SEQUENCE_INDICATE_DELAY:
    {
      if(getStateDuration(sm) > STEP_DURATION)
 758:	ce 01       	movw	r24, r28
 75a:	bd d1       	rcall	.+890    	; 0xad6 <getStateDuration>
 75c:	61 39       	cpi	r22, 0x91	; 145
 75e:	71 40       	sbci	r23, 0x01	; 1
 760:	81 05       	cpc	r24, r1
 762:	91 05       	cpc	r25, r1
 764:	08 f4       	brcc	.+2      	; 0x768 <mainStateFunc+0xde>
 766:	ec c0       	rjmp	.+472    	; 0x940 <mainStateFunc+0x2b6>
  PORTB = _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
}

static void stepEnd()
{
  stopNote();
 768:	8a df       	rcall	.-236    	; 0x67e <stopNote>
  PORTB = 0;
 76a:	18 ba       	out	0x18, r1	; 24
    case GAME_STATE_PLAY_SEQUENCE_INDICATE_DELAY:
    {
      if(getStateDuration(sm) > STEP_DURATION)
      {
        stepEnd();
        currentStep++;
 76c:	80 91 a2 00 	lds	r24, 0x00A2
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 a2 00 	sts	0x00A2, r24
        if(currentStep >= currentLevel)
 776:	90 91 a3 00 	lds	r25, 0x00A3
 77a:	89 17       	cp	r24, r25
 77c:	28 f3       	brcs	.-54     	; 0x748 <mainStateFunc+0xbe>
        {
          //All done, now handle player repeating this level
#if 0
          sm->next = GAME_STATE_CHECK_SEQUENCE_PAUSE;
#else
          currentStep = 0;
 77e:	10 92 a2 00 	sts	0x00A2, r1
 782:	34 c0       	rjmp	.+104    	; 0x7ec <mainStateFunc+0x162>
    }
#endif

    case GAME_STATE_CHECK_SEQUENCE:
    {
      if( getStateDuration(sm) > REPEAT_STEP_TO )
 784:	ce 01       	movw	r24, r28
 786:	a7 d1       	rcall	.+846    	; 0xad6 <getStateDuration>
 788:	69 38       	cpi	r22, 0x89	; 137
 78a:	73 41       	sbci	r23, 0x13	; 19
 78c:	81 05       	cpc	r24, r1
 78e:	91 05       	cpc	r25, r1
 790:	10 f0       	brcs	.+4      	; 0x796 <mainStateFunc+0x10c>
      {
        sm->next = GAME_STATE_GAME_OVER;
 792:	88 e0       	ldi	r24, 0x08	; 8
 794:	da cf       	rjmp	.-76     	; 0x74a <mainStateFunc+0xc0>
      }
      else
      {
        uint8_t playerKey = getInput();
 796:	95 de       	rcall	.-726    	; 0x4c2 <getInput>
 798:	98 2f       	mov	r25, r24

        if(playerKey != NO_KEY)
 79a:	84 30       	cpi	r24, 0x04	; 4
 79c:	09 f4       	brne	.+2      	; 0x7a0 <mainStateFunc+0x116>
 79e:	d0 c0       	rjmp	.+416    	; 0x940 <mainStateFunc+0x2b6>
        {
          if(sequence[currentStep] == playerKey)
 7a0:	80 91 a2 00 	lds	r24, 0x00A2
 7a4:	e8 2f       	mov	r30, r24
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	ec 55       	subi	r30, 0x5C	; 92
 7aa:	ff 4f       	sbci	r31, 0xFF	; 255
 7ac:	20 81       	ld	r18, Z
 7ae:	92 13       	cpse	r25, r18
 7b0:	f0 cf       	rjmp	.-32     	; 0x792 <mainStateFunc+0x108>
          {
            doIndicateStep(currentStep);
 7b2:	34 df       	rcall	.-408    	; 0x61c <doIndicateStep>
            sm->next = GAME_STATE_CHECK_SEQUENCE_INDICATE;
 7b4:	87 e0       	ldi	r24, 0x07	; 7
 7b6:	c9 cf       	rjmp	.-110    	; 0x74a <mainStateFunc+0xc0>
      break;
    }

    case GAME_STATE_CHECK_SEQUENCE_INDICATE:
    {
      if( getStateDuration(sm) > STEP_DURATION )
 7b8:	ce 01       	movw	r24, r28
 7ba:	8d d1       	rcall	.+794    	; 0xad6 <getStateDuration>
 7bc:	61 39       	cpi	r22, 0x91	; 145
 7be:	71 40       	sbci	r23, 0x01	; 1
 7c0:	81 05       	cpc	r24, r1
 7c2:	91 05       	cpc	r25, r1
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <mainStateFunc+0x13e>
 7c6:	bc c0       	rjmp	.+376    	; 0x940 <mainStateFunc+0x2b6>
  PORTB = _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
}

static void stepEnd()
{
  stopNote();
 7c8:	5a df       	rcall	.-332    	; 0x67e <stopNote>
  PORTB = 0;
 7ca:	18 ba       	out	0x18, r1	; 24
    case GAME_STATE_CHECK_SEQUENCE_INDICATE:
    {
      if( getStateDuration(sm) > STEP_DURATION )
      {
        stepEnd();
        currentStep++;
 7cc:	90 91 a2 00 	lds	r25, 0x00A2
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	90 93 a2 00 	sts	0x00A2, r25
        if(currentStep >= currentLevel)
 7d6:	80 91 a3 00 	lds	r24, 0x00A3
 7da:	98 17       	cp	r25, r24
 7dc:	38 f0       	brcs	.+14     	; 0x7ec <mainStateFunc+0x162>
        {
          //All done, now handle player repeating this level
          currentLevel++;
 7de:	8f 5f       	subi	r24, 0xFF	; 255
 7e0:	80 93 a3 00 	sts	0x00A3, r24
          if(currentLevel > MAX_LEVEL )
 7e4:	81 34       	cpi	r24, 0x41	; 65
 7e6:	a8 f6       	brcc	.-86     	; 0x792 <mainStateFunc+0x108>
          {
            sm->next = GAME_STATE_GAME_OVER;
          }
          else
          {
            sm->next = GAME_STATE_PLAY_SEQUENCE_INIT;
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	af cf       	rjmp	.-162    	; 0x74a <mainStateFunc+0xc0>
          }
        }
        else
        {
          //Play next step in this sequence
          sm->next = GAME_STATE_CHECK_SEQUENCE;
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	ad cf       	rjmp	.-166    	; 0x74a <mainStateFunc+0xc0>
      break;
    }

    case GAME_STATE_GAME_OVER:
    {
      if(isStateEntered(sm))
 7f0:	ce 01       	movw	r24, r28
 7f2:	84 d1       	rcall	.+776    	; 0xafc <isStateEntered>
 7f4:	88 23       	and	r24, r24
 7f6:	51 f0       	breq	.+20     	; 0x80c <mainStateFunc+0x182>
    {&PINA, GREEN_SWITCH, BUTTON_UP, 0},
};

static void indicateFail()
{
  playNote(150, 3000);
 7f8:	48 eb       	ldi	r20, 0xB8	; 184
 7fa:	5b e0       	ldi	r21, 0x0B	; 11
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	86 e9       	ldi	r24, 0x96	; 150
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	d7 de       	rcall	.-594    	; 0x5b4 <playNote>
  PORTB = _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
 806:	8f e0       	ldi	r24, 0x0F	; 15
 808:	88 bb       	out	0x18, r24	; 24
 80a:	9a c0       	rjmp	.+308    	; 0x940 <mainStateFunc+0x2b6>
    {
      if(isStateEntered(sm))
      {
        indicateFail();
      }
      else if(getStateDuration(sm) > 4000)
 80c:	ce 01       	movw	r24, r28
 80e:	63 d1       	rcall	.+710    	; 0xad6 <getStateDuration>
 810:	61 3a       	cpi	r22, 0xA1	; 161
 812:	7f 40       	sbci	r23, 0x0F	; 15
 814:	81 05       	cpc	r24, r1
 816:	91 05       	cpc	r25, r1
 818:	08 f4       	brcc	.+2      	; 0x81c <mainStateFunc+0x192>
 81a:	92 c0       	rjmp	.+292    	; 0x940 <mainStateFunc+0x2b6>
  PORTB = _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
}

static void stepEnd()
{
  stopNote();
 81c:	30 df       	rcall	.-416    	; 0x67e <stopNote>
  PORTB = 0;
 81e:	18 ba       	out	0x18, r1	; 24
 820:	8e c0       	rjmp	.+284    	; 0x93e <mainStateFunc+0x2b4>
      break;
    }

    case GAME_STATE_TITLE_TUNE_START:
    {
      noteIdx = 0;
 822:	10 92 fb 00 	sts	0x00FB, r1
 826:	10 92 fa 00 	sts	0x00FA, r1
      noteLen = 150;
 82a:	86 e9       	ldi	r24, 0x96	; 150
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	a0 e0       	ldi	r26, 0x00	; 0
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	80 93 f0 00 	sts	0x00F0, r24
 836:	90 93 f1 00 	sts	0x00F1, r25
 83a:	a0 93 f2 00 	sts	0x00F2, r26
 83e:	b0 93 f3 00 	sts	0x00F3, r27
      noteDly = 190;
 842:	8e eb       	ldi	r24, 0xBE	; 190
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	a0 e0       	ldi	r26, 0x00	; 0
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	80 93 ec 00 	sts	0x00EC, r24
 84e:	90 93 ed 00 	sts	0x00ED, r25
 852:	a0 93 ee 00 	sts	0x00EE, r26
 856:	b0 93 ef 00 	sts	0x00EF, r27
 85a:	6f c0       	rjmp	.+222    	; 0x93a <mainStateFunc+0x2b0>
      break;
    }

    case GAME_STATE_TITLE_TUNE_PLAY_NOTE:
    {
      if(getInput() == NO_KEY)
 85c:	32 de       	rcall	.-924    	; 0x4c2 <getInput>
 85e:	84 30       	cpi	r24, 0x04	; 4
 860:	09 f5       	brne	.+66     	; 0x8a4 <mainStateFunc+0x21a>
      {
        uint16_t noteFreq = pgm_read_word(&(noteArray[noteIdx]));
 862:	e0 91 fa 00 	lds	r30, 0x00FA
 866:	f0 91 fb 00 	lds	r31, 0x00FB
 86a:	ee 0f       	add	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	e6 5c       	subi	r30, 0xC6	; 198
 870:	ff 4f       	sbci	r31, 0xFF	; 255
 872:	05 91       	lpm	r16, Z+
 874:	14 91       	lpm	r17, Z
        playNote(noteFreq, noteFreq * noteLen / 500);
 876:	b8 01       	movw	r22, r16
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	20 91 f0 00 	lds	r18, 0x00F0
 880:	30 91 f1 00 	lds	r19, 0x00F1
 884:	40 91 f2 00 	lds	r20, 0x00F2
 888:	50 91 f3 00 	lds	r21, 0x00F3
 88c:	ad d1       	rcall	.+858    	; 0xbe8 <__mulsi3>
 88e:	24 ef       	ldi	r18, 0xF4	; 244
 890:	31 e0       	ldi	r19, 0x01	; 1
 892:	40 e0       	ldi	r20, 0x00	; 0
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	e8 d1       	rcall	.+976    	; 0xc68 <__udivmodsi4>
 898:	ba 01       	movw	r22, r20
 89a:	a9 01       	movw	r20, r18
 89c:	c8 01       	movw	r24, r16
 89e:	8a de       	rcall	.-748    	; 0x5b4 <playNote>
        sm->next = GAME_STATE_TITLE_TUNE_HOLD_NOTE;
 8a0:	8b e0       	ldi	r24, 0x0B	; 11
 8a2:	53 cf       	rjmp	.-346    	; 0x74a <mainStateFunc+0xc0>
      }
      else
      {
        stopNote();
 8a4:	ec de       	rcall	.-552    	; 0x67e <stopNote>
        sm->next = GAME_STATE_PRE_GAME;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	50 cf       	rjmp	.-352    	; 0x74a <mainStateFunc+0xc0>
}
EMPTY_INTERRUPT(PCINT0_vect);

uint8_t isNoteFinished(void)
{
  return TCCR1B == 0;
 8aa:	8e b5       	in	r24, 0x2e	; 46
      break;
    }

    case GAME_STATE_TITLE_TUNE_HOLD_NOTE:
    {
      if(isNoteFinished() && getStateDuration(sm) > noteDly)
 8ac:	81 11       	cpse	r24, r1
 8ae:	48 c0       	rjmp	.+144    	; 0x940 <mainStateFunc+0x2b6>
 8b0:	ce 01       	movw	r24, r28
 8b2:	11 d1       	rcall	.+546    	; 0xad6 <getStateDuration>
 8b4:	c0 90 ec 00 	lds	r12, 0x00EC
 8b8:	d0 90 ed 00 	lds	r13, 0x00ED
 8bc:	e0 90 ee 00 	lds	r14, 0x00EE
 8c0:	f0 90 ef 00 	lds	r15, 0x00EF
 8c4:	c6 16       	cp	r12, r22
 8c6:	d7 06       	cpc	r13, r23
 8c8:	e8 06       	cpc	r14, r24
 8ca:	f9 06       	cpc	r15, r25
 8cc:	c8 f5       	brcc	.+114    	; 0x940 <mainStateFunc+0x2b6>
      {
        if((noteIdx > 512) && (noteIdx < 540)) // slow down (rit.) at end.
 8ce:	80 91 fa 00 	lds	r24, 0x00FA
 8d2:	90 91 fb 00 	lds	r25, 0x00FB
 8d6:	9c 01       	movw	r18, r24
 8d8:	21 50       	subi	r18, 0x01	; 1
 8da:	32 40       	sbci	r19, 0x02	; 2
 8dc:	2b 31       	cpi	r18, 0x1B	; 27
 8de:	31 05       	cpc	r19, r1
 8e0:	10 f5       	brcc	.+68     	; 0x926 <mainStateFunc+0x29c>
        {
          noteLen += 3;
 8e2:	00 91 f0 00 	lds	r16, 0x00F0
 8e6:	10 91 f1 00 	lds	r17, 0x00F1
 8ea:	20 91 f2 00 	lds	r18, 0x00F2
 8ee:	30 91 f3 00 	lds	r19, 0x00F3
 8f2:	0d 5f       	subi	r16, 0xFD	; 253
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	2f 4f       	sbci	r18, 0xFF	; 255
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	00 93 f0 00 	sts	0x00F0, r16
 8fe:	10 93 f1 00 	sts	0x00F1, r17
 902:	20 93 f2 00 	sts	0x00F2, r18
 906:	30 93 f3 00 	sts	0x00F3, r19
          noteDly += 5;
 90a:	b7 01       	movw	r22, r14
 90c:	a6 01       	movw	r20, r12
 90e:	4b 5f       	subi	r20, 0xFB	; 251
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	6f 4f       	sbci	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	40 93 ec 00 	sts	0x00EC, r20
 91a:	50 93 ed 00 	sts	0x00ED, r21
 91e:	60 93 ee 00 	sts	0x00EE, r22
 922:	70 93 ef 00 	sts	0x00EF, r23
        }
        noteIdx++;
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	90 93 fb 00 	sts	0x00FB, r25
 92c:	80 93 fa 00 	sts	0x00FA, r24
        if (noteIdx == TUNE_LENGTH)
 930:	80 32       	cpi	r24, 0x20	; 32
 932:	92 40       	sbci	r25, 0x02	; 2
 934:	11 f4       	brne	.+4      	; 0x93a <mainStateFunc+0x2b0>
        {
          sm->next = GAME_STATE_POR;
 936:	1a 82       	std	Y+2, r1	; 0x02
          enterDeepSleep();
 938:	1b de       	rcall	.-970    	; 0x570 <enterDeepSleep>
        }
        else
        {
          sm->next = GAME_STATE_TITLE_TUNE_PLAY_NOTE;
 93a:	8a e0       	ldi	r24, 0x0A	; 10
 93c:	06 cf       	rjmp	.-500    	; 0x74a <mainStateFunc+0xc0>
    }

    case STATE_INVALID:
    default:
    {
      sm->next = GAME_STATE_POR;
 93e:	1a 82       	std	Y+2, r1	; 0x02
      break;
    }
  }

  return retValue;
}
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	cd b7       	in	r28, 0x3d	; 61
 944:	de b7       	in	r29, 0x3e	; 62
 946:	e8 e0       	ldi	r30, 0x08	; 8
 948:	d7 c1       	rjmp	.+942    	; 0xcf8 <__epilogue_restores__+0x14>

0000094a <initButtons>:

static const uint32_t DEBOUNCE_TIME = 50; //ms
static const uint32_t HOLD_TIME = 2000; //ms

void initButtons(ButtonCtx* ctx, uint8_t count)
{
 94a:	fc 01       	movw	r30, r24
 94c:	33 96       	adiw	r30, 0x03	; 3
  for( uint8_t idx = 0; idx < count; idx++)
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	96 17       	cp	r25, r22
 952:	29 f0       	breq	.+10     	; 0x95e <initButtons+0x14>
  {
    ctx[idx].state = BUTTON_UP;
 954:	11 82       	std	Z+1, r1	; 0x01
 956:	10 82       	st	Z, r1
static const uint32_t DEBOUNCE_TIME = 50; //ms
static const uint32_t HOLD_TIME = 2000; //ms

void initButtons(ButtonCtx* ctx, uint8_t count)
{
  for( uint8_t idx = 0; idx < count; idx++)
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	39 96       	adiw	r30, 0x09	; 9
 95c:	f9 cf       	rjmp	.-14     	; 0x950 <initButtons+0x6>
  {
    ctx[idx].state = BUTTON_UP;
  }
}
 95e:	08 95       	ret

00000960 <updateButtons>:

void updateButtons(ButtonCtx* buttons, uint8_t count)
{
 960:	a0 e0       	ldi	r26, 0x00	; 0
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e5 eb       	ldi	r30, 0xB5	; 181
 966:	f4 e0       	ldi	r31, 0x04	; 4
 968:	a3 c1       	rjmp	.+838    	; 0xcb0 <__prologue_saves__+0x4>
 96a:	46 2e       	mov	r4, r22
 96c:	ec 01       	movw	r28, r24
 96e:	23 96       	adiw	r28, 0x03	; 3
  for( uint8_t idx = 0; idx < count; idx++)
 970:	51 2c       	mov	r5, r1
          if( (millis() - button->time) > DEBOUNCE_TIME )
          {
              if(pressed)
              {
                  button->time = millis();
                  button->state = BUTTON_DOWN;
 972:	03 e0       	ldi	r16, 0x03	; 3
 974:	10 e0       	ldi	r17, 0x00	; 0
                  button->state = BUTTON_HELD;
              }
          }
          else
          {
              button->state = BUTTON_RELEASED;
 976:	85 e0       	ldi	r24, 0x05	; 5
 978:	e8 2e       	mov	r14, r24
 97a:	f1 2c       	mov	r15, r1
      {
          if(pressed)
          {
              if( (millis() - button->time) > HOLD_TIME )
              {
                  button->state = BUTTON_HELD;
 97c:	94 e0       	ldi	r25, 0x04	; 4
 97e:	c9 2e       	mov	r12, r25
 980:	d1 2c       	mov	r13, r1
      case BUTTON_UP:
      {
        if(pressed)
        {
          button->time = millis();
          button->state = BUTTON_PRESSED;
 982:	aa 24       	eor	r10, r10
 984:	a3 94       	inc	r10
 986:	b1 2c       	mov	r11, r1
        break;
      }

      case BUTTON_PRESSED:
      {
        button->state = BUTTON_DEBOUCE;
 988:	32 e0       	ldi	r19, 0x02	; 2
 98a:	83 2e       	mov	r8, r19
 98c:	91 2c       	mov	r9, r1
  }
}

void updateButtons(ButtonCtx* buttons, uint8_t count)
{
  for( uint8_t idx = 0; idx < count; idx++)
 98e:	54 14       	cp	r5, r4
 990:	09 f4       	brne	.+2      	; 0x994 <updateButtons+0x34>
 992:	70 c0       	rjmp	.+224    	; 0xa74 <updateButtons+0x114>
  {
    ButtonCtx* button = &buttons[idx];
    const uint8_t pressed = *button->portAddr & _BV(button->bitMask) ? 0 : 1;
 994:	fe 01       	movw	r30, r28
 996:	33 97       	sbiw	r30, 0x03	; 3
 998:	01 90       	ld	r0, Z+
 99a:	f0 81       	ld	r31, Z
 99c:	e0 2d       	mov	r30, r0
 99e:	60 80       	ld	r6, Z
 9a0:	71 2c       	mov	r7, r1
 9a2:	fe 01       	movw	r30, r28
 9a4:	31 97       	sbiw	r30, 0x01	; 1
 9a6:	00 80       	ld	r0, Z
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <updateButtons+0x4e>
 9aa:	75 94       	asr	r7
 9ac:	67 94       	ror	r6
 9ae:	0a 94       	dec	r0
 9b0:	e2 f7       	brpl	.-8      	; 0x9aa <updateButtons+0x4a>
 9b2:	21 e0       	ldi	r18, 0x01	; 1
 9b4:	62 22       	and	r6, r18
 9b6:	77 24       	eor	r7, r7
    switch(button->state)
 9b8:	88 81       	ld	r24, Y
 9ba:	99 81       	ldd	r25, Y+1	; 0x01
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	91 05       	cpc	r25, r1
 9c0:	f1 f0       	breq	.+60     	; 0x9fe <updateButtons+0x9e>
 9c2:	40 f4       	brcc	.+16     	; 0x9d4 <updateButtons+0x74>
 9c4:	00 97       	sbiw	r24, 0x00	; 0
 9c6:	79 f0       	breq	.+30     	; 0x9e6 <updateButtons+0x86>
 9c8:	01 97       	sbiw	r24, 0x01	; 1
 9ca:	09 f0       	breq	.+2      	; 0x9ce <updateButtons+0x6e>
 9cc:	50 c0       	rjmp	.+160    	; 0xa6e <updateButtons+0x10e>
        break;
      }

      case BUTTON_PRESSED:
      {
        button->state = BUTTON_DEBOUCE;
 9ce:	99 82       	std	Y+1, r9	; 0x01
 9d0:	88 82       	st	Y, r8
        break;
 9d2:	4d c0       	rjmp	.+154    	; 0xa6e <updateButtons+0x10e>
{
  for( uint8_t idx = 0; idx < count; idx++)
  {
    ButtonCtx* button = &buttons[idx];
    const uint8_t pressed = *button->portAddr & _BV(button->bitMask) ? 0 : 1;
    switch(button->state)
 9d4:	84 30       	cpi	r24, 0x04	; 4
 9d6:	91 05       	cpc	r25, r1
 9d8:	09 f4       	brne	.+2      	; 0x9dc <updateButtons+0x7c>
 9da:	44 c0       	rjmp	.+136    	; 0xa64 <updateButtons+0x104>
 9dc:	50 f1       	brcs	.+84     	; 0xa32 <updateButtons+0xd2>
 9de:	05 97       	sbiw	r24, 0x05	; 5
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <updateButtons+0x84>
 9e2:	43 c0       	rjmp	.+134    	; 0xa6a <updateButtons+0x10a>
 9e4:	44 c0       	rjmp	.+136    	; 0xa6e <updateButtons+0x10e>
    {
      case BUTTON_UP:
      {
        if(pressed)
 9e6:	61 14       	cp	r6, r1
 9e8:	71 04       	cpc	r7, r1
 9ea:	09 f0       	breq	.+2      	; 0x9ee <updateButtons+0x8e>
 9ec:	40 c0       	rjmp	.+128    	; 0xa6e <updateButtons+0x10e>
        {
          button->time = millis();
 9ee:	bd d0       	rcall	.+378    	; 0xb6a <millis>
 9f0:	6a 83       	std	Y+2, r22	; 0x02
 9f2:	7b 83       	std	Y+3, r23	; 0x03
 9f4:	8c 83       	std	Y+4, r24	; 0x04
 9f6:	9d 83       	std	Y+5, r25	; 0x05
          button->state = BUTTON_PRESSED;
 9f8:	b9 82       	std	Y+1, r11	; 0x01
 9fa:	a8 82       	st	Y, r10
 9fc:	38 c0       	rjmp	.+112    	; 0xa6e <updateButtons+0x10e>
        break;
      }

      case BUTTON_DEBOUCE:
      {
          if( (millis() - button->time) > DEBOUNCE_TIME )
 9fe:	b5 d0       	rcall	.+362    	; 0xb6a <millis>
 a00:	2a 81       	ldd	r18, Y+2	; 0x02
 a02:	3b 81       	ldd	r19, Y+3	; 0x03
 a04:	4c 81       	ldd	r20, Y+4	; 0x04
 a06:	5d 81       	ldd	r21, Y+5	; 0x05
 a08:	dc 01       	movw	r26, r24
 a0a:	cb 01       	movw	r24, r22
 a0c:	82 1b       	sub	r24, r18
 a0e:	93 0b       	sbc	r25, r19
 a10:	a4 0b       	sbc	r26, r20
 a12:	b5 0b       	sbc	r27, r21
 a14:	c3 97       	sbiw	r24, 0x33	; 51
 a16:	a1 05       	cpc	r26, r1
 a18:	b1 05       	cpc	r27, r1
 a1a:	48 f1       	brcs	.+82     	; 0xa6e <updateButtons+0x10e>
          {
              if(pressed)
 a1c:	61 14       	cp	r6, r1
 a1e:	71 04       	cpc	r7, r1
 a20:	21 f5       	brne	.+72     	; 0xa6a <updateButtons+0x10a>
              {
                  button->time = millis();
 a22:	a3 d0       	rcall	.+326    	; 0xb6a <millis>
 a24:	6a 83       	std	Y+2, r22	; 0x02
 a26:	7b 83       	std	Y+3, r23	; 0x03
 a28:	8c 83       	std	Y+4, r24	; 0x04
 a2a:	9d 83       	std	Y+5, r25	; 0x05
                  button->state = BUTTON_DOWN;
 a2c:	19 83       	std	Y+1, r17	; 0x01
 a2e:	08 83       	st	Y, r16
 a30:	1e c0       	rjmp	.+60     	; 0xa6e <updateButtons+0x10e>
          break;
      }

      case BUTTON_DOWN:
      {
          if(pressed)
 a32:	61 14       	cp	r6, r1
 a34:	71 04       	cpc	r7, r1
 a36:	99 f4       	brne	.+38     	; 0xa5e <updateButtons+0xfe>
          {
              if( (millis() - button->time) > HOLD_TIME )
 a38:	98 d0       	rcall	.+304    	; 0xb6a <millis>
 a3a:	2a 81       	ldd	r18, Y+2	; 0x02
 a3c:	3b 81       	ldd	r19, Y+3	; 0x03
 a3e:	4c 81       	ldd	r20, Y+4	; 0x04
 a40:	5d 81       	ldd	r21, Y+5	; 0x05
 a42:	dc 01       	movw	r26, r24
 a44:	cb 01       	movw	r24, r22
 a46:	82 1b       	sub	r24, r18
 a48:	93 0b       	sbc	r25, r19
 a4a:	a4 0b       	sbc	r26, r20
 a4c:	b5 0b       	sbc	r27, r21
 a4e:	81 3d       	cpi	r24, 0xD1	; 209
 a50:	97 40       	sbci	r25, 0x07	; 7
 a52:	a1 05       	cpc	r26, r1
 a54:	b1 05       	cpc	r27, r1
 a56:	58 f0       	brcs	.+22     	; 0xa6e <updateButtons+0x10e>
              {
                  button->state = BUTTON_HELD;
 a58:	d9 82       	std	Y+1, r13	; 0x01
 a5a:	c8 82       	st	Y, r12
 a5c:	08 c0       	rjmp	.+16     	; 0xa6e <updateButtons+0x10e>
              }
          }
          else
          {
              button->state = BUTTON_RELEASED;
 a5e:	f9 82       	std	Y+1, r15	; 0x01
 a60:	e8 82       	st	Y, r14
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <updateButtons+0x10e>
          break;
      }

      case BUTTON_HELD:
      {
          if(!pressed)
 a64:	61 14       	cp	r6, r1
 a66:	71 04       	cpc	r7, r1
 a68:	11 f0       	breq	.+4      	; 0xa6e <updateButtons+0x10e>
          break;
      }

      case BUTTON_RELEASED:
      {
          button->state = BUTTON_UP;
 a6a:	19 82       	std	Y+1, r1	; 0x01
 a6c:	18 82       	st	Y, r1
  }
}

void updateButtons(ButtonCtx* buttons, uint8_t count)
{
  for( uint8_t idx = 0; idx < count; idx++)
 a6e:	53 94       	inc	r5
 a70:	29 96       	adiw	r28, 0x09	; 9
 a72:	8d cf       	rjmp	.-230    	; 0x98e <updateButtons+0x2e>
          button->state = BUTTON_UP;
          break;
      }
    }
  }
}
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	e0 e1       	ldi	r30, 0x10	; 16
 a7a:	36 c1       	rjmp	.+620    	; 0xce8 <__epilogue_restores__+0x4>

00000a7c <runStateM>:
  state->enterTime = millis();
  runStateM(state);
}

uint8_t runStateM(struct StateM* state)
{
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	ec 01       	movw	r28, r24
  uint8_t retVal;

  state->next = STATE_INVALID;
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	8a 83       	std	Y+2, r24	; 0x02
  retVal = state->handlerFunc(state);
 a88:	ef 81       	ldd	r30, Y+7	; 0x07
 a8a:	f8 85       	ldd	r31, Y+8	; 0x08
 a8c:	ce 01       	movw	r24, r28
 a8e:	09 95       	icall
 a90:	18 2f       	mov	r17, r24
  state->previous = state->current;
 a92:	88 81       	ld	r24, Y
 a94:	89 83       	std	Y+1, r24	; 0x01
  if( STATE_INVALID !=  state->next)
 a96:	8a 81       	ldd	r24, Y+2	; 0x02
 a98:	8f 3f       	cpi	r24, 0xFF	; 255
 a9a:	31 f0       	breq	.+12     	; 0xaa8 <runStateM+0x2c>
  {
    state->previous = state->current;
    state->current = state->next;
 a9c:	88 83       	st	Y, r24
    state->enterTime = millis();
 a9e:	65 d0       	rcall	.+202    	; 0xb6a <millis>
 aa0:	6b 83       	std	Y+3, r22	; 0x03
 aa2:	7c 83       	std	Y+4, r23	; 0x04
 aa4:	8d 83       	std	Y+5, r24	; 0x05
 aa6:	9e 83       	std	Y+6, r25	; 0x06
  }
  return retVal;
}
 aa8:	81 2f       	mov	r24, r17
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	08 95       	ret

00000ab2 <initStateM>:
#include "state.h"
#include "tmr.h"


void initStateM(struct StateM* state, SMFunc handlerFunc)
{
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	ec 01       	movw	r28, r24
  state->handlerFunc = handlerFunc;
 ab8:	78 87       	std	Y+8, r23	; 0x08
 aba:	6f 83       	std	Y+7, r22	; 0x07
  state->current = STATE_INVALID;
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	88 83       	st	Y, r24
  state->previous = STATE_INVALID;
 ac0:	89 83       	std	Y+1, r24	; 0x01
  state->enterTime = millis();
 ac2:	53 d0       	rcall	.+166    	; 0xb6a <millis>
 ac4:	6b 83       	std	Y+3, r22	; 0x03
 ac6:	7c 83       	std	Y+4, r23	; 0x04
 ac8:	8d 83       	std	Y+5, r24	; 0x05
 aca:	9e 83       	std	Y+6, r25	; 0x06
  runStateM(state);
 acc:	ce 01       	movw	r24, r28
 ace:	d6 df       	rcall	.-84     	; 0xa7c <runStateM>
}
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	08 95       	ret

00000ad6 <getStateDuration>:
  }
  return retVal;
}

uint32_t getStateDuration(struct StateM* state)
{
 ad6:	0f 93       	push	r16
 ad8:	1f 93       	push	r17
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	ec 01       	movw	r28, r24
  return millis() - state->enterTime;
 ae0:	44 d0       	rcall	.+136    	; 0xb6a <millis>
 ae2:	0b 81       	ldd	r16, Y+3	; 0x03
 ae4:	1c 81       	ldd	r17, Y+4	; 0x04
 ae6:	2d 81       	ldd	r18, Y+5	; 0x05
 ae8:	3e 81       	ldd	r19, Y+6	; 0x06
 aea:	60 1b       	sub	r22, r16
 aec:	71 0b       	sbc	r23, r17
 aee:	82 0b       	sbc	r24, r18
 af0:	93 0b       	sbc	r25, r19
}
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <isStateEntered>:

uint8_t isStateEntered(struct StateM* state)
{
 afc:	fc 01       	movw	r30, r24
  return state->current != state->previous;
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	20 81       	ld	r18, Z
 b02:	91 81       	ldd	r25, Z+1	; 0x01
 b04:	29 13       	cpse	r18, r25
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <isStateEntered+0xe>
 b08:	80 e0       	ldi	r24, 0x00	; 0
}
 b0a:	08 95       	ret

00000b0c <__vector_9>:

//Keeps track of time since
static volatile uint32_t tmr0Mills; //Power on time in ms. ~49 Days max

ISR(TIM0_COMPA_vect)
{
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	8f 93       	push	r24
 b18:	9f 93       	push	r25
 b1a:	af 93       	push	r26
 b1c:	bf 93       	push	r27
  tmr0Mills++;
 b1e:	80 91 e4 00 	lds	r24, 0x00E4
 b22:	90 91 e5 00 	lds	r25, 0x00E5
 b26:	a0 91 e6 00 	lds	r26, 0x00E6
 b2a:	b0 91 e7 00 	lds	r27, 0x00E7
 b2e:	01 96       	adiw	r24, 0x01	; 1
 b30:	a1 1d       	adc	r26, r1
 b32:	b1 1d       	adc	r27, r1
 b34:	80 93 e4 00 	sts	0x00E4, r24
 b38:	90 93 e5 00 	sts	0x00E5, r25
 b3c:	a0 93 e6 00 	sts	0x00E6, r26
 b40:	b0 93 e7 00 	sts	0x00E7, r27
}
 b44:	bf 91       	pop	r27
 b46:	af 91       	pop	r26
 b48:	9f 91       	pop	r25
 b4a:	8f 91       	pop	r24
 b4c:	0f 90       	pop	r0
 b4e:	0f be       	out	0x3f, r0	; 63
 b50:	0f 90       	pop	r0
 b52:	1f 90       	pop	r1
 b54:	18 95       	reti

00000b56 <startTmr>:

void startTmr(void)
{
  //Timer below, assuming a 1MHz sys-clock, will give 976Hz TimrA int. Close
  //enough for a 1ms time base
  OCR0A = 128;
 b56:	80 e8       	ldi	r24, 0x80	; 128
 b58:	86 bf       	out	0x36, r24	; 54
  TCCR0A = _BV(WGM01); //CTC mode
 b5a:	82 e0       	ldi	r24, 0x02	; 2
 b5c:	80 bf       	out	0x30, r24	; 48
  TCNT0 = 0;
 b5e:	12 be       	out	0x32, r1	; 50
  TIFR0 = _BV(TOV0) | _BV(OCF0A) | _BV(OCF0B); //Clear TOV0
 b60:	97 e0       	ldi	r25, 0x07	; 7
 b62:	98 bf       	out	0x38, r25	; 56
  TIMSK0 = _BV(OCIE0A); //Enable A match int
 b64:	89 bf       	out	0x39, r24	; 57
  TCCR0B = _BV(CS01);  // CLK/8
 b66:	83 bf       	out	0x33, r24	; 51
 b68:	08 95       	ret

00000b6a <millis>:


uint32_t millis(void)
{
  uint32_t m;
  uint8_t oldSREG = SREG;
 b6a:	2f b7       	in	r18, 0x3f	; 63
  cli();
 b6c:	f8 94       	cli
  m = tmr0Mills;
 b6e:	60 91 e4 00 	lds	r22, 0x00E4
 b72:	70 91 e5 00 	lds	r23, 0x00E5
 b76:	80 91 e6 00 	lds	r24, 0x00E6
 b7a:	90 91 e7 00 	lds	r25, 0x00E7
  SREG = oldSREG;
 b7e:	2f bf       	out	0x3f, r18	; 63
  return m;
}
 b80:	08 95       	ret

00000b82 <main>:

int main (void)
{
  MCUSR = 0;
 b82:	14 be       	out	0x34, r1	; 52
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	a8 95       	wdr
 b8a:	81 b5       	in	r24, 0x21	; 33
 b8c:	88 61       	ori	r24, 0x18	; 24
 b8e:	81 bd       	out	0x21, r24	; 33
 b90:	11 bc       	out	0x21, r1	; 33
 b92:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  //Setup Pins
  DDRA = _BV(SPEAKER); //Unused as inputs
 b94:	c0 e4       	ldi	r28, 0x40	; 64
 b96:	ca bb       	out	0x1a, r28	; 26
  PORTA = ~(_BV(SPEAKER)); //Unused pull high as well
 b98:	8f eb       	ldi	r24, 0xBF	; 191
 b9a:	8b bb       	out	0x1b, r24	; 27
  DDRB = _BV(RED_LED) | _BV(BLUE_LED) | _BV(YELLOW_LED) | _BV(GREEN_LED);
 b9c:	8f e0       	ldi	r24, 0x0F	; 15
 b9e:	87 bb       	out	0x17, r24	; 23
  PORTB = 0;
 ba0:	18 ba       	out	0x18, r1	; 24

  startTmr();
 ba2:	d9 df       	rcall	.-78     	; 0xb56 <startTmr>

  ACSR = _BV(ACD); //Don't need ADC
 ba4:	80 e8       	ldi	r24, 0x80	; 128
 ba6:	88 b9       	out	0x08, r24	; 8

  TCCR1B = 0;
 ba8:	1e bc       	out	0x2e, r1	; 46
  TIFR1 = _BV(OCF1A);
 baa:	82 e0       	ldi	r24, 0x02	; 2
 bac:	8b b9       	out	0x0b, r24	; 11
  TCCR1A = _BV(COM1A0);
 bae:	cf bd       	out	0x2f, r28	; 47
  TCCR1B = _BV(WGM12) | _BV(CS11);
 bb0:	8a e0       	ldi	r24, 0x0A	; 10
 bb2:	8e bd       	out	0x2e, r24	; 46
  TIMSK1 |= _BV(OCIE1A);
 bb4:	61 9a       	sbi	0x0c, 1	; 12

  sei();
 bb6:	78 94       	sei

  initButtons(buttons, BUTTON_CNT);
 bb8:	64 e0       	ldi	r22, 0x04	; 4
 bba:	80 e6       	ldi	r24, 0x60	; 96
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	c5 de       	rcall	.-630    	; 0x94a <initButtons>
  initStateM(&mainSM, mainStateFunc);
 bc0:	65 e4       	ldi	r22, 0x45	; 69
 bc2:	73 e0       	ldi	r23, 0x03	; 3
 bc4:	89 e9       	ldi	r24, 0x99	; 153
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	74 df       	rcall	.-280    	; 0xab2 <initStateM>

  while(1)
  {
    sleep_mode();
 bca:	85 b7       	in	r24, 0x35	; 53
 bcc:	80 62       	ori	r24, 0x20	; 32
 bce:	85 bf       	out	0x35, r24	; 53
 bd0:	88 95       	sleep
 bd2:	85 b7       	in	r24, 0x35	; 53
 bd4:	8f 7d       	andi	r24, 0xDF	; 223
 bd6:	85 bf       	out	0x35, r24	; 53
    updateButtons(buttons, BUTTON_CNT);
 bd8:	64 e0       	ldi	r22, 0x04	; 4
 bda:	80 e6       	ldi	r24, 0x60	; 96
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	c0 de       	rcall	.-640    	; 0x960 <updateButtons>
    runStateM(&mainSM);
 be0:	89 e9       	ldi	r24, 0x99	; 153
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	4b df       	rcall	.-362    	; 0xa7c <runStateM>
 be6:	f1 cf       	rjmp	.-30     	; 0xbca <main+0x48>

00000be8 <__mulsi3>:
 be8:	ee 27       	eor	r30, r30
 bea:	ff 27       	eor	r31, r31

00000bec <__mulsi3_helper>:
 bec:	aa 27       	eor	r26, r26
 bee:	bb 27       	eor	r27, r27
 bf0:	08 c0       	rjmp	.+16     	; 0xc02 <__mulsi3_helper+0x16>
 bf2:	a2 0f       	add	r26, r18
 bf4:	b3 1f       	adc	r27, r19
 bf6:	e4 1f       	adc	r30, r20
 bf8:	f5 1f       	adc	r31, r21
 bfa:	22 0f       	add	r18, r18
 bfc:	33 1f       	adc	r19, r19
 bfe:	44 1f       	adc	r20, r20
 c00:	55 1f       	adc	r21, r21
 c02:	96 95       	lsr	r25
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	98 f3       	brcs	.-26     	; 0xbf2 <__mulsi3_helper+0x6>
 c0c:	70 40       	sbci	r23, 0x00	; 0
 c0e:	a9 f7       	brne	.-22     	; 0xbfa <__mulsi3_helper+0xe>
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	99 f7       	brne	.-26     	; 0xbfa <__mulsi3_helper+0xe>
 c14:	bd 01       	movw	r22, r26
 c16:	cf 01       	movw	r24, r30
 c18:	08 95       	ret

00000c1a <__udivmodhi4>:
 c1a:	aa 1b       	sub	r26, r26
 c1c:	bb 1b       	sub	r27, r27
 c1e:	51 e1       	ldi	r21, 0x11	; 17
 c20:	07 c0       	rjmp	.+14     	; 0xc30 <__udivmodhi4_ep>

00000c22 <__udivmodhi4_loop>:
 c22:	aa 1f       	adc	r26, r26
 c24:	bb 1f       	adc	r27, r27
 c26:	a6 17       	cp	r26, r22
 c28:	b7 07       	cpc	r27, r23
 c2a:	10 f0       	brcs	.+4      	; 0xc30 <__udivmodhi4_ep>
 c2c:	a6 1b       	sub	r26, r22
 c2e:	b7 0b       	sbc	r27, r23

00000c30 <__udivmodhi4_ep>:
 c30:	88 1f       	adc	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	5a 95       	dec	r21
 c36:	a9 f7       	brne	.-22     	; 0xc22 <__udivmodhi4_loop>
 c38:	80 95       	com	r24
 c3a:	90 95       	com	r25
 c3c:	bc 01       	movw	r22, r24
 c3e:	cd 01       	movw	r24, r26
 c40:	08 95       	ret

00000c42 <__divmodhi4>:
 c42:	97 fb       	bst	r25, 7
 c44:	07 2e       	mov	r0, r23
 c46:	16 f4       	brtc	.+4      	; 0xc4c <__divmodhi4+0xa>
 c48:	00 94       	com	r0
 c4a:	06 d0       	rcall	.+12     	; 0xc58 <__divmodhi4_neg1>
 c4c:	77 fd       	sbrc	r23, 7
 c4e:	08 d0       	rcall	.+16     	; 0xc60 <__divmodhi4_neg2>
 c50:	e4 df       	rcall	.-56     	; 0xc1a <__udivmodhi4>
 c52:	07 fc       	sbrc	r0, 7
 c54:	05 d0       	rcall	.+10     	; 0xc60 <__divmodhi4_neg2>
 c56:	3e f4       	brtc	.+14     	; 0xc66 <__divmodhi4_exit>

00000c58 <__divmodhi4_neg1>:
 c58:	90 95       	com	r25
 c5a:	81 95       	neg	r24
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__divmodhi4_neg2>:
 c60:	70 95       	com	r23
 c62:	61 95       	neg	r22
 c64:	7f 4f       	sbci	r23, 0xFF	; 255

00000c66 <__divmodhi4_exit>:
 c66:	08 95       	ret

00000c68 <__udivmodsi4>:
 c68:	a1 e2       	ldi	r26, 0x21	; 33
 c6a:	1a 2e       	mov	r1, r26
 c6c:	aa 1b       	sub	r26, r26
 c6e:	bb 1b       	sub	r27, r27
 c70:	fd 01       	movw	r30, r26
 c72:	0d c0       	rjmp	.+26     	; 0xc8e <__udivmodsi4_ep>

00000c74 <__udivmodsi4_loop>:
 c74:	aa 1f       	adc	r26, r26
 c76:	bb 1f       	adc	r27, r27
 c78:	ee 1f       	adc	r30, r30
 c7a:	ff 1f       	adc	r31, r31
 c7c:	a2 17       	cp	r26, r18
 c7e:	b3 07       	cpc	r27, r19
 c80:	e4 07       	cpc	r30, r20
 c82:	f5 07       	cpc	r31, r21
 c84:	20 f0       	brcs	.+8      	; 0xc8e <__udivmodsi4_ep>
 c86:	a2 1b       	sub	r26, r18
 c88:	b3 0b       	sbc	r27, r19
 c8a:	e4 0b       	sbc	r30, r20
 c8c:	f5 0b       	sbc	r31, r21

00000c8e <__udivmodsi4_ep>:
 c8e:	66 1f       	adc	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	99 1f       	adc	r25, r25
 c96:	1a 94       	dec	r1
 c98:	69 f7       	brne	.-38     	; 0xc74 <__udivmodsi4_loop>
 c9a:	60 95       	com	r22
 c9c:	70 95       	com	r23
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	9b 01       	movw	r18, r22
 ca4:	ac 01       	movw	r20, r24
 ca6:	bd 01       	movw	r22, r26
 ca8:	cf 01       	movw	r24, r30
 caa:	08 95       	ret

00000cac <__prologue_saves__>:
 cac:	2f 92       	push	r2
 cae:	3f 92       	push	r3
 cb0:	4f 92       	push	r4
 cb2:	5f 92       	push	r5
 cb4:	6f 92       	push	r6
 cb6:	7f 92       	push	r7
 cb8:	8f 92       	push	r8
 cba:	9f 92       	push	r9
 cbc:	af 92       	push	r10
 cbe:	bf 92       	push	r11
 cc0:	cf 92       	push	r12
 cc2:	df 92       	push	r13
 cc4:	ef 92       	push	r14
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	ca 1b       	sub	r28, r26
 cd6:	db 0b       	sbc	r29, r27
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	09 94       	ijmp

00000ce4 <__epilogue_restores__>:
 ce4:	2a 88       	ldd	r2, Y+18	; 0x12
 ce6:	39 88       	ldd	r3, Y+17	; 0x11
 ce8:	48 88       	ldd	r4, Y+16	; 0x10
 cea:	5f 84       	ldd	r5, Y+15	; 0x0f
 cec:	6e 84       	ldd	r6, Y+14	; 0x0e
 cee:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf6:	b9 84       	ldd	r11, Y+9	; 0x09
 cf8:	c8 84       	ldd	r12, Y+8	; 0x08
 cfa:	df 80       	ldd	r13, Y+7	; 0x07
 cfc:	ee 80       	ldd	r14, Y+6	; 0x06
 cfe:	fd 80       	ldd	r15, Y+5	; 0x05
 d00:	0c 81       	ldd	r16, Y+4	; 0x04
 d02:	1b 81       	ldd	r17, Y+3	; 0x03
 d04:	aa 81       	ldd	r26, Y+2	; 0x02
 d06:	b9 81       	ldd	r27, Y+1	; 0x01
 d08:	ce 0f       	add	r28, r30
 d0a:	d1 1d       	adc	r29, r1
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	de bf       	out	0x3e, r29	; 62
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	cd bf       	out	0x3d, r28	; 61
 d16:	ed 01       	movw	r28, r26
 d18:	08 95       	ret

00000d1a <do_rand>:
 d1a:	8f 92       	push	r8
 d1c:	9f 92       	push	r9
 d1e:	af 92       	push	r10
 d20:	bf 92       	push	r11
 d22:	cf 92       	push	r12
 d24:	df 92       	push	r13
 d26:	ef 92       	push	r14
 d28:	ff 92       	push	r15
 d2a:	cf 93       	push	r28
 d2c:	df 93       	push	r29
 d2e:	ec 01       	movw	r28, r24
 d30:	68 81       	ld	r22, Y
 d32:	79 81       	ldd	r23, Y+1	; 0x01
 d34:	8a 81       	ldd	r24, Y+2	; 0x02
 d36:	9b 81       	ldd	r25, Y+3	; 0x03
 d38:	61 15       	cp	r22, r1
 d3a:	71 05       	cpc	r23, r1
 d3c:	81 05       	cpc	r24, r1
 d3e:	91 05       	cpc	r25, r1
 d40:	21 f4       	brne	.+8      	; 0xd4a <do_rand+0x30>
 d42:	64 e2       	ldi	r22, 0x24	; 36
 d44:	79 ed       	ldi	r23, 0xD9	; 217
 d46:	8b e5       	ldi	r24, 0x5B	; 91
 d48:	97 e0       	ldi	r25, 0x07	; 7
 d4a:	2d e1       	ldi	r18, 0x1D	; 29
 d4c:	33 ef       	ldi	r19, 0xF3	; 243
 d4e:	41 e0       	ldi	r20, 0x01	; 1
 d50:	50 e0       	ldi	r21, 0x00	; 0
 d52:	3c d0       	rcall	.+120    	; 0xdcc <__divmodsi4>
 d54:	49 01       	movw	r8, r18
 d56:	5a 01       	movw	r10, r20
 d58:	27 ea       	ldi	r18, 0xA7	; 167
 d5a:	31 e4       	ldi	r19, 0x41	; 65
 d5c:	40 e0       	ldi	r20, 0x00	; 0
 d5e:	50 e0       	ldi	r21, 0x00	; 0
 d60:	43 df       	rcall	.-378    	; 0xbe8 <__mulsi3>
 d62:	6b 01       	movw	r12, r22
 d64:	7c 01       	movw	r14, r24
 d66:	2c ee       	ldi	r18, 0xEC	; 236
 d68:	34 ef       	ldi	r19, 0xF4	; 244
 d6a:	4f ef       	ldi	r20, 0xFF	; 255
 d6c:	5f ef       	ldi	r21, 0xFF	; 255
 d6e:	c5 01       	movw	r24, r10
 d70:	b4 01       	movw	r22, r8
 d72:	3a df       	rcall	.-396    	; 0xbe8 <__mulsi3>
 d74:	dc 01       	movw	r26, r24
 d76:	cb 01       	movw	r24, r22
 d78:	8c 0d       	add	r24, r12
 d7a:	9d 1d       	adc	r25, r13
 d7c:	ae 1d       	adc	r26, r14
 d7e:	bf 1d       	adc	r27, r15
 d80:	b7 ff       	sbrs	r27, 7
 d82:	03 c0       	rjmp	.+6      	; 0xd8a <do_rand+0x70>
 d84:	01 97       	sbiw	r24, 0x01	; 1
 d86:	a1 09       	sbc	r26, r1
 d88:	b0 48       	sbci	r27, 0x80	; 128
 d8a:	88 83       	st	Y, r24
 d8c:	99 83       	std	Y+1, r25	; 0x01
 d8e:	aa 83       	std	Y+2, r26	; 0x02
 d90:	bb 83       	std	Y+3, r27	; 0x03
 d92:	9f 77       	andi	r25, 0x7F	; 127
 d94:	df 91       	pop	r29
 d96:	cf 91       	pop	r28
 d98:	ff 90       	pop	r15
 d9a:	ef 90       	pop	r14
 d9c:	df 90       	pop	r13
 d9e:	cf 90       	pop	r12
 da0:	bf 90       	pop	r11
 da2:	af 90       	pop	r10
 da4:	9f 90       	pop	r9
 da6:	8f 90       	pop	r8
 da8:	08 95       	ret

00000daa <rand_r>:
 daa:	b7 df       	rcall	.-146    	; 0xd1a <do_rand>
 dac:	08 95       	ret

00000dae <rand>:
 dae:	84 e9       	ldi	r24, 0x94	; 148
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	b3 df       	rcall	.-154    	; 0xd1a <do_rand>
 db4:	08 95       	ret

00000db6 <srand>:
 db6:	a0 e0       	ldi	r26, 0x00	; 0
 db8:	b0 e0       	ldi	r27, 0x00	; 0
 dba:	80 93 94 00 	sts	0x0094, r24
 dbe:	90 93 95 00 	sts	0x0095, r25
 dc2:	a0 93 96 00 	sts	0x0096, r26
 dc6:	b0 93 97 00 	sts	0x0097, r27
 dca:	08 95       	ret

00000dcc <__divmodsi4>:
 dcc:	05 2e       	mov	r0, r21
 dce:	97 fb       	bst	r25, 7
 dd0:	16 f4       	brtc	.+4      	; 0xdd6 <__divmodsi4+0xa>
 dd2:	00 94       	com	r0
 dd4:	0f d0       	rcall	.+30     	; 0xdf4 <__negsi2>
 dd6:	57 fd       	sbrc	r21, 7
 dd8:	05 d0       	rcall	.+10     	; 0xde4 <__divmodsi4_neg2>
 dda:	46 df       	rcall	.-372    	; 0xc68 <__udivmodsi4>
 ddc:	07 fc       	sbrc	r0, 7
 dde:	02 d0       	rcall	.+4      	; 0xde4 <__divmodsi4_neg2>
 de0:	46 f4       	brtc	.+16     	; 0xdf2 <__divmodsi4_exit>
 de2:	08 c0       	rjmp	.+16     	; 0xdf4 <__negsi2>

00000de4 <__divmodsi4_neg2>:
 de4:	50 95       	com	r21
 de6:	40 95       	com	r20
 de8:	30 95       	com	r19
 dea:	21 95       	neg	r18
 dec:	3f 4f       	sbci	r19, 0xFF	; 255
 dee:	4f 4f       	sbci	r20, 0xFF	; 255
 df0:	5f 4f       	sbci	r21, 0xFF	; 255

00000df2 <__divmodsi4_exit>:
 df2:	08 95       	ret

00000df4 <__negsi2>:
 df4:	90 95       	com	r25
 df6:	80 95       	com	r24
 df8:	70 95       	com	r23
 dfa:	61 95       	neg	r22
 dfc:	7f 4f       	sbci	r23, 0xFF	; 255
 dfe:	8f 4f       	sbci	r24, 0xFF	; 255
 e00:	9f 4f       	sbci	r25, 0xFF	; 255
 e02:	08 95       	ret

00000e04 <_exit>:
 e04:	f8 94       	cli

00000e06 <__stop_program>:
 e06:	ff cf       	rjmp	.-2      	; 0xe06 <__stop_program>
